
q2_toggle_rate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08002474  08002474  00003474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d0  080025d0  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080025d0  080025d0  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d0  080025d0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d0  080025d0  000035d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025d4  080025d4  000035d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00003ec4  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003f2c  20003f2c  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044ca  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fc9  00000000  00000000  00008562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000478  00000000  00000000  00009530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000347  00000000  00000000  000099a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3f4  00000000  00000000  00009cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000051d0  00000000  00000000  000250e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094d54  00000000  00000000  0002a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bf007  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016e8  00000000  00000000  000bf04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000c0734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  000c0753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800245c 	.word	0x0800245c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800245c 	.word	0x0800245c

080001d0 <__io_putchar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

//void ITM_SendChar(uint8_t ch)
int __io_putchar(int ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	//Enable TRCENA
	DEMCR |= (1 << 24);
 80001d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000218 <__io_putchar+0x48>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <__io_putchar+0x48>)
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001e2:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80001e4:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <__io_putchar+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <__io_putchar+0x4c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80001f0:	bf00      	nop
 80001f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f8      	beq.n	80001f2 <__io_putchar+0x22>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000200:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6013      	str	r3, [r2, #0]

	return 1;
 8000208:	2301      	movs	r3, #1
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000edfc 	.word	0xe000edfc
 800021c:	e0000e00 	.word	0xe0000e00

08000220 <led_init>:
 *      Author: sunbeam
 */
#include"led.h"

void led_init(uint16_t pin)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	80fb      	strh	r3, [r7, #6]
	// enable clock for gpio D port
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 800022a:	4b29      	ldr	r3, [pc, #164]	@ (80002d0 <led_init+0xb0>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022e:	4a28      	ldr	r2, [pc, #160]	@ (80002d0 <led_init+0xb0>)
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	6313      	str	r3, [r2, #48]	@ 0x30

	// select mode of GPIO pins as output
	LED_GPIO->MODER |= BV(2 * pin);
 8000236:	4b27      	ldr	r3, [pc, #156]	@ (80002d4 <led_init+0xb4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	88fa      	ldrh	r2, [r7, #6]
 800023c:	0052      	lsls	r2, r2, #1
 800023e:	2101      	movs	r1, #1
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	4611      	mov	r1, r2
 8000246:	4a23      	ldr	r2, [pc, #140]	@ (80002d4 <led_init+0xb4>)
 8000248:	430b      	orrs	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER &= ~BV(2 * pin + 1);
 800024c:	4b21      	ldr	r3, [pc, #132]	@ (80002d4 <led_init+0xb4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	88fa      	ldrh	r2, [r7, #6]
 8000252:	0052      	lsls	r2, r2, #1
 8000254:	3201      	adds	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	43d2      	mvns	r2, r2
 800025e:	4611      	mov	r1, r2
 8000260:	4a1c      	ldr	r2, [pc, #112]	@ (80002d4 <led_init+0xb4>)
 8000262:	400b      	ands	r3, r1
 8000264:	6013      	str	r3, [r2, #0]

	// select output type as push pull
	LED_GPIO->OTYPER &= ~BV(pin);
 8000266:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <led_init+0xb4>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	88fa      	ldrh	r2, [r7, #6]
 800026c:	2101      	movs	r1, #1
 800026e:	fa01 f202 	lsl.w	r2, r1, r2
 8000272:	43d2      	mvns	r2, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a17      	ldr	r2, [pc, #92]	@ (80002d4 <led_init+0xb4>)
 8000278:	400b      	ands	r3, r1
 800027a:	6053      	str	r3, [r2, #4]

	// select output speed as low
	LED_GPIO->OSPEEDR &= ~(BV(2 * pin ) | BV(2 * pin + 1));
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <led_init+0xb4>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	88fa      	ldrh	r2, [r7, #6]
 8000282:	0052      	lsls	r2, r2, #1
 8000284:	2101      	movs	r1, #1
 8000286:	4091      	lsls	r1, r2
 8000288:	88fa      	ldrh	r2, [r7, #6]
 800028a:	0052      	lsls	r2, r2, #1
 800028c:	3201      	adds	r2, #1
 800028e:	2001      	movs	r0, #1
 8000290:	fa00 f202 	lsl.w	r2, r0, r2
 8000294:	430a      	orrs	r2, r1
 8000296:	43d2      	mvns	r2, r2
 8000298:	4611      	mov	r1, r2
 800029a:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <led_init+0xb4>)
 800029c:	400b      	ands	r3, r1
 800029e:	6093      	str	r3, [r2, #8]

	// do not select pull up / pull down resistor
	LED_GPIO->PUPDR &=~(BV(2 * pin ) | BV(2 * pin + 1));
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <led_init+0xb4>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	88fa      	ldrh	r2, [r7, #6]
 80002a6:	0052      	lsls	r2, r2, #1
 80002a8:	2101      	movs	r1, #1
 80002aa:	4091      	lsls	r1, r2
 80002ac:	88fa      	ldrh	r2, [r7, #6]
 80002ae:	0052      	lsls	r2, r2, #1
 80002b0:	3201      	adds	r2, #1
 80002b2:	2001      	movs	r0, #1
 80002b4:	fa00 f202 	lsl.w	r2, r0, r2
 80002b8:	430a      	orrs	r2, r1
 80002ba:	43d2      	mvns	r2, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <led_init+0xb4>)
 80002c0:	400b      	ands	r3, r1
 80002c2:	60d3      	str	r3, [r2, #12]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020c00 	.word	0x40020c00

080002d8 <led_toggle>:
{
	// write 0 on respective bits of ODR
	LED_GPIO->ODR &= ~BV(pin);
}
void led_toggle(uint16_t pin)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	80fb      	strh	r3, [r7, #6]
	LED_GPIO->ODR ^= BV(pin);
 80002e2:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <led_toggle+0x2c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	88fa      	ldrh	r2, [r7, #6]
 80002e8:	2101      	movs	r1, #1
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <led_toggle+0x2c>)
 80002f2:	404b      	eors	r3, r1
 80002f4:	6153      	str	r3, [r2, #20]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40020c00 	.word	0x40020c00

08000308 <vLedTask1>:
#endif

int rate;

void vLedTask1(void *pvParam)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	int led =*((int *)pvParam);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		// work
		led_toggle(led);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	b29b      	uxth	r3, r3
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffdc 	bl	80002d8 <led_toggle>
		vTaskDelay(rate / portTICK_RATE_MS);
 8000320:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <vLedTask1+0x28>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fb93 	bl	8000a50 <vTaskDelay>
		led_toggle(led);
 800032a:	bf00      	nop
 800032c:	e7f3      	b.n	8000316 <vLedTask1+0xe>
 800032e:	bf00      	nop
 8000330:	20000084 	.word	0x20000084

08000334 <main>:
	vTaskDelete(NULL);
}


int main(int argc,char *argv[])
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af02      	add	r7, sp, #8
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	if(argc<3){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b02      	cmp	r3, #2
 8000342:	dc05      	bgt.n	8000350 <main+0x1c>
		printf("enter 3 args: led no. and rate\n");
 8000344:	4832      	ldr	r0, [pc, #200]	@ (8000410 <main+0xdc>)
 8000346:	f001 fc9f 	bl	8001c88 <puts>
		return -1;
 800034a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800034e:	e05b      	b.n	8000408 <main+0xd4>
	}
	led_init(LED_RED);
 8000350:	200e      	movs	r0, #14
 8000352:	f7ff ff65 	bl	8000220 <led_init>
	led_init(LED_GREEN);
 8000356:	200c      	movs	r0, #12
 8000358:	f7ff ff62 	bl	8000220 <led_init>
	led_init(LED_BLUE);
 800035c:	200f      	movs	r0, #15
 800035e:	f7ff ff5f 	bl	8000220 <led_init>
	led_init(LED_ORANGE);
 8000362:	200d      	movs	r0, #13
 8000364:	f7ff ff5c 	bl	8000220 <led_init>

	int led=atoi(argv[1]);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3304      	adds	r3, #4
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4618      	mov	r0, r3
 8000370:	f001 faea 	bl	8001948 <atoi>
 8000374:	4603      	mov	r3, r0
 8000376:	60fb      	str	r3, [r7, #12]
	rate=atoi(argv[2]);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3308      	adds	r3, #8
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fae2 	bl	8001948 <atoi>
 8000384:	4603      	mov	r3, r0
 8000386:	4a23      	ldr	r2, [pc, #140]	@ (8000414 <main+0xe0>)
 8000388:	6013      	str	r3, [r2, #0]
	if(led==14){
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	2b0e      	cmp	r3, #14
 800038e:	d10b      	bne.n	80003a8 <main+0x74>
	xTaskCreate(vLedTask1, "task1-APeriodic", configMINIMAL_STACK_SIZE, (void *)&led, 1, NULL);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2200      	movs	r2, #0
 8000396:	9201      	str	r2, [sp, #4]
 8000398:	2201      	movs	r2, #1
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	2280      	movs	r2, #128	@ 0x80
 800039e:	491e      	ldr	r1, [pc, #120]	@ (8000418 <main+0xe4>)
 80003a0:	481e      	ldr	r0, [pc, #120]	@ (800041c <main+0xe8>)
 80003a2:	f000 fa04 	bl	80007ae <xTaskCreate>
 80003a6:	e02b      	b.n	8000400 <main+0xcc>
	}
	else if(led==15){
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b0f      	cmp	r3, #15
 80003ac:	d10b      	bne.n	80003c6 <main+0x92>
	xTaskCreate(vLedTask1, "2-APeriodic", configMINIMAL_STACK_SIZE,(void *)&led, 1, NULL);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	2200      	movs	r2, #0
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	9200      	str	r2, [sp, #0]
 80003ba:	2280      	movs	r2, #128	@ 0x80
 80003bc:	4918      	ldr	r1, [pc, #96]	@ (8000420 <main+0xec>)
 80003be:	4817      	ldr	r0, [pc, #92]	@ (800041c <main+0xe8>)
 80003c0:	f000 f9f5 	bl	80007ae <xTaskCreate>
 80003c4:	e01c      	b.n	8000400 <main+0xcc>
	}
	else if(led==13){
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	2b0d      	cmp	r3, #13
 80003ca:	d10b      	bne.n	80003e4 <main+0xb0>
	xTaskCreate(vLedTask1, "3-APeriodic", configMINIMAL_STACK_SIZE,(void *)&led, 1, NULL);
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	2200      	movs	r2, #0
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	2201      	movs	r2, #1
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	4912      	ldr	r1, [pc, #72]	@ (8000424 <main+0xf0>)
 80003dc:	480f      	ldr	r0, [pc, #60]	@ (800041c <main+0xe8>)
 80003de:	f000 f9e6 	bl	80007ae <xTaskCreate>
 80003e2:	e00d      	b.n	8000400 <main+0xcc>
	}
	else if(led==14){
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	2b0e      	cmp	r3, #14
 80003e8:	d10a      	bne.n	8000400 <main+0xcc>
	xTaskCreate(vLedTask1, "4-APeriodic", configMINIMAL_STACK_SIZE, (void *)&led, 1, NULL);
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	2200      	movs	r2, #0
 80003f0:	9201      	str	r2, [sp, #4]
 80003f2:	2201      	movs	r2, #1
 80003f4:	9200      	str	r2, [sp, #0]
 80003f6:	2280      	movs	r2, #128	@ 0x80
 80003f8:	490b      	ldr	r1, [pc, #44]	@ (8000428 <main+0xf4>)
 80003fa:	4808      	ldr	r0, [pc, #32]	@ (800041c <main+0xe8>)
 80003fc:	f000 f9d7 	bl	80007ae <xTaskCreate>
	}
	vTaskStartScheduler();
 8000400:	f000 fb5c 	bl	8000abc <vTaskStartScheduler>
	while(1);
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <main+0xd0>
	return 0;
}
 8000408:	4618      	mov	r0, r3
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	08002474 	.word	0x08002474
 8000414:	20000084 	.word	0x20000084
 8000418:	08002494 	.word	0x08002494
 800041c:	08000309 	.word	0x08000309
 8000420:	080024a4 	.word	0x080024a4
 8000424:	080024b0 	.word	0x080024b0
 8000428:	080024bc 	.word	0x080024bc

0800042c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	e00a      	b.n	8000454 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800043e:	f3af 8000 	nop.w
 8000442:	4601      	mov	r1, r0
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	b2ca      	uxtb	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3301      	adds	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	429a      	cmp	r2, r3
 800045a:	dbf0      	blt.n	800043e <_read+0x12>
	}

return len;
 800045c:	687b      	ldr	r3, [r7, #4]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e009      	b.n	800048c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	1c5a      	adds	r2, r3, #1
 800047c:	60ba      	str	r2, [r7, #8]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff fea5 	bl	80001d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	3301      	adds	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	dbf1      	blt.n	8000478 <_write+0x12>
	}
	return len;
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <_close>:

int _close(int file)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
	return -1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004c6:	605a      	str	r2, [r3, #4]
	return 0;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <_isatty>:

int _isatty(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
	return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	return 0;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f001 fd2a 	bl	8001f90 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20020000 	.word	0x20020000
 8000568:	00000400 	.word	0x00000400
 800056c:	20000088 	.word	0x20000088
 8000570:	20003f30 	.word	0x20003f30

08000574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <SystemInit+0x1c>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800057e:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <SystemInit+0x1c>)
 8000580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000588:	f000 f804 	bl	8000594 <DWT_Init>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <DWT_Init+0x58>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <DWT_Init+0x58>)
 800059e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <DWT_Init+0x58>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a10      	ldr	r2, [pc, #64]	@ (80005ec <DWT_Init+0x58>)
 80005aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <DWT_Init+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <DWT_Init+0x5c>)
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <DWT_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	@ (80005f0 <DWT_Init+0x5c>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <DWT_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ce:	bf00      	nop
    __ASM volatile ("NOP");
 80005d0:	bf00      	nop
    __ASM volatile ("NOP");
 80005d2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <DWT_Init+0x5c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000edf0 	.word	0xe000edf0
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff ffbc 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f001 fcbb 	bl	8001f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fe85 	bl	8000334 <main>

0800062a <LoopForever>:

LoopForever:
  b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000638:	080025d8 	.word	0x080025d8
  ldr r2, =_sbss
 800063c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000640:	20003f2c 	.word	0x20003f2c

08000644 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC_IRQHandler>

08000646 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f103 0208 	add.w	r2, r3, #8
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800065e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f103 0208 	add.w	r2, r3, #8
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f103 0208 	add.w	r2, r3, #8
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006fe:	d103      	bne.n	8000708 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e00c      	b.n	8000722 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3308      	adds	r3, #8
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e002      	b.n	8000716 <vListInsert+0x2e>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	429a      	cmp	r2, r3
 8000720:	d2f6      	bcs.n	8000710 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800075a:	b480      	push	{r7}
 800075c:	b085      	sub	sp, #20
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	6892      	ldr	r2, [r2, #8]
 8000770:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	6852      	ldr	r2, [r2, #4]
 800077a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	429a      	cmp	r2, r3
 8000784:	d103      	bne.n	800078e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b08c      	sub	sp, #48	@ 0x30
 80007b2:	af04      	add	r7, sp, #16
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fed2 	bl	800156c <pvPortMalloc>
 80007c8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00e      	beq.n	80007ee <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80007d0:	20a0      	movs	r0, #160	@ 0xa0
 80007d2:	f000 fecb 	bl	800156c <pvPortMalloc>
 80007d6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80007e4:	e005      	b.n	80007f2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f000 ff8e 	bl	8001708 <vPortFree>
 80007ec:	e001      	b.n	80007f2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d013      	beq.n	8000820 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	2300      	movs	r3, #0
 80007fc:	9303      	str	r3, [sp, #12]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f000 f80e 	bl	8000830 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000814:	69f8      	ldr	r0, [r7, #28]
 8000816:	f000 f8b1 	bl	800097c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	e002      	b.n	8000826 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000824:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000826:	69bb      	ldr	r3, [r7, #24]
    }
 8000828:	4618      	mov	r0, r3
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800083e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000848:	3b01      	subs	r3, #1
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	f023 0307 	bic.w	r3, r3, #7
 8000856:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <prvInitialiseNewTask+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01f      	beq.n	80008c0 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	e012      	b.n	80008ac <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	4413      	add	r3, r2
 800088c:	7819      	ldrb	r1, [r3, #0]
 800088e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	4413      	add	r3, r2
 8000894:	3334      	adds	r3, #52	@ 0x34
 8000896:	460a      	mov	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3301      	adds	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d9e9      	bls.n	8000886 <prvInitialiseNewTask+0x56>
 80008b2:	e000      	b.n	80008b6 <prvInitialiseNewTask+0x86>
            {
                break;
 80008b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80008b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80008be:	e003      	b.n	80008c8 <prvInitialiseNewTask+0x98>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80008c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80008c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d901      	bls.n	80008d2 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80008ce:	2306      	movs	r3, #6
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80008d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80008d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008dc:	645a      	str	r2, [r3, #68]	@ 0x44
            pxNewTCB->uxMutexesHeld = 0;
 80008de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e0:	2200      	movs	r2, #0
 80008e2:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80008e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e6:	3304      	adds	r3, #4
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fecc 	bl	8000686 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80008ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f0:	3318      	adds	r3, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fec7 	bl	8000686 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80008f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000900:	f1c3 0207 	rsb	r2, r3, #7
 8000904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000906:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800090a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800090e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000910:	3398      	adds	r3, #152	@ 0x98
 8000912:	2204      	movs	r2, #4
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fa96 	bl	8001e48 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800091c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800091e:	339c      	adds	r3, #156	@ 0x9c
 8000920:	2201      	movs	r2, #1
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fa8f 	bl	8001e48 <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800092a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800092c:	334c      	adds	r3, #76	@ 0x4c
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fa88 	bl	8001e48 <memset>
 8000938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800093a:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <prvInitialiseNewTask+0x140>)
 800093c:	651a      	str	r2, [r3, #80]	@ 0x50
 800093e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000940:	4a0c      	ldr	r2, [pc, #48]	@ (8000974 <prvInitialiseNewTask+0x144>)
 8000942:	655a      	str	r2, [r3, #84]	@ 0x54
 8000944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000946:	4a0c      	ldr	r2, [pc, #48]	@ (8000978 <prvInitialiseNewTask+0x148>)
 8000948:	659a      	str	r2, [r3, #88]	@ 0x58
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	68f9      	ldr	r1, [r7, #12]
 800094e:	69b8      	ldr	r0, [r7, #24]
 8000950:	f000 fbf2 	bl	8001138 <pxPortInitialiseStack>
 8000954:	4602      	mov	r2, r0
 8000956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000958:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800095a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <prvInitialiseNewTask+0x136>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000964:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20003de0 	.word	0x20003de0
 8000974:	20003e48 	.word	0x20003e48
 8000978:	20003eb0 	.word	0x20003eb0

0800097c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000984:	f000 fd0a 	bl	800139c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000988:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <prvAddNewTaskToReadyList+0xb8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a29      	ldr	r2, [pc, #164]	@ (8000a34 <prvAddNewTaskToReadyList+0xb8>)
 8000990:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000992:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <prvAddNewTaskToReadyList+0xbc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d109      	bne.n	80009ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800099a:	4a27      	ldr	r2, [pc, #156]	@ (8000a38 <prvAddNewTaskToReadyList+0xbc>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <prvAddNewTaskToReadyList+0xb8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d110      	bne.n	80009ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80009a8:	f000 fac0 	bl	8000f2c <prvInitialiseTaskLists>
 80009ac:	e00d      	b.n	80009ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <prvAddNewTaskToReadyList+0xc0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d109      	bne.n	80009ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <prvAddNewTaskToReadyList+0xbc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d802      	bhi.n	80009ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80009c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a38 <prvAddNewTaskToReadyList+0xbc>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <prvAddNewTaskToReadyList+0xc4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <prvAddNewTaskToReadyList+0xc4>)
 80009d2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	2201      	movs	r2, #1
 80009da:	409a      	lsls	r2, r3
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <prvAddNewTaskToReadyList+0xc8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <prvAddNewTaskToReadyList+0xc8>)
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <prvAddNewTaskToReadyList+0xcc>)
 80009f4:	441a      	add	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3304      	adds	r3, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4610      	mov	r0, r2
 80009fe:	f7ff fe4f 	bl	80006a0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000a02:	f000 fcfd 	bl	8001400 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <prvAddNewTaskToReadyList+0xc0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00e      	beq.n	8000a2c <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <prvAddNewTaskToReadyList+0xbc>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <prvAddNewTaskToReadyList+0xd0>)
 8000a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	f3bf 8f4f 	dsb	sy
 8000a28:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000018c 	.word	0x2000018c
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	20000198 	.word	0x20000198
 8000a40:	200001a8 	.word	0x200001a8
 8000a44:	20000194 	.word	0x20000194
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d018      	beq.n	8000a94 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <vTaskDelay+0x64>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00b      	beq.n	8000a82 <vTaskDelay+0x32>
        __asm volatile
 8000a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a6e:	f383 8811 	msr	BASEPRI, r3
 8000a72:	f3bf 8f6f 	isb	sy
 8000a76:	f3bf 8f4f 	dsb	sy
 8000a7a:	60bb      	str	r3, [r7, #8]
    }
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	e7fd      	b.n	8000a7e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000a82:	f000 f871 	bl	8000b68 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000a86:	2100      	movs	r1, #0
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 faef 	bl	800106c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000a8e:	f000 f879 	bl	8000b84 <xTaskResumeAll>
 8000a92:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d107      	bne.n	8000aaa <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <vTaskDelay+0x68>)
 8000a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001b4 	.word	0x200001b4
 8000ab8:	e000ed04 	.word	0xe000ed04

08000abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <vTaskStartScheduler+0x88>)
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	491e      	ldr	r1, [pc, #120]	@ (8000b48 <vTaskStartScheduler+0x8c>)
 8000ad0:	481e      	ldr	r0, [pc, #120]	@ (8000b4c <vTaskStartScheduler+0x90>)
 8000ad2:	f7ff fe6c 	bl	80007ae <xTaskCreate>
 8000ad6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d11b      	bne.n	8000b16 <vTaskStartScheduler+0x5a>
        __asm volatile
 8000ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae2:	f383 8811 	msr	BASEPRI, r3
 8000ae6:	f3bf 8f6f 	isb	sy
 8000aea:	f3bf 8f4f 	dsb	sy
 8000aee:	60bb      	str	r3, [r7, #8]
    }
 8000af0:	bf00      	nop
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000af2:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <vTaskStartScheduler+0x94>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	334c      	adds	r3, #76	@ 0x4c
 8000af8:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <vTaskStartScheduler+0x98>)
 8000afa:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <vTaskStartScheduler+0x9c>)
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b02:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <vTaskStartScheduler+0xa0>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <vTaskStartScheduler+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000b10:	f000 fba0 	bl	8001254 <xPortStartScheduler>
 8000b14:	e00f      	b.n	8000b36 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b1c:	d10b      	bne.n	8000b36 <vTaskStartScheduler+0x7a>
        __asm volatile
 8000b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b22:	f383 8811 	msr	BASEPRI, r3
 8000b26:	f3bf 8f6f 	isb	sy
 8000b2a:	f3bf 8f4f 	dsb	sy
 8000b2e:	607b      	str	r3, [r7, #4]
    }
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	e7fd      	b.n	8000b32 <vTaskStartScheduler+0x76>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <vTaskStartScheduler+0xa8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001b0 	.word	0x200001b0
 8000b48:	080024c8 	.word	0x080024c8
 8000b4c:	08000efd 	.word	0x08000efd
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	20000018 	.word	0x20000018
 8000b58:	200001ac 	.word	0x200001ac
 8000b5c:	20000198 	.word	0x20000198
 8000b60:	20000190 	.word	0x20000190
 8000b64:	20000004 	.word	0x20000004

08000b68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <vTaskSuspendAll+0x18>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <vTaskSuspendAll+0x18>)
 8000b74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	200001b4 	.word	0x200001b4

08000b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000b92:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <xTaskResumeAll+0x118>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10b      	bne.n	8000bb2 <xTaskResumeAll+0x2e>
        __asm volatile
 8000b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b9e:	f383 8811 	msr	BASEPRI, r3
 8000ba2:	f3bf 8f6f 	isb	sy
 8000ba6:	f3bf 8f4f 	dsb	sy
 8000baa:	603b      	str	r3, [r7, #0]
    }
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	e7fd      	b.n	8000bae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000bb2:	f000 fbf3 	bl	800139c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000bb6:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <xTaskResumeAll+0x118>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	4a37      	ldr	r2, [pc, #220]	@ (8000c9c <xTaskResumeAll+0x118>)
 8000bbe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bc0:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <xTaskResumeAll+0x118>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d161      	bne.n	8000c8c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bc8:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <xTaskResumeAll+0x11c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d05d      	beq.n	8000c8c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bd0:	e02e      	b.n	8000c30 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <xTaskResumeAll+0x120>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3318      	adds	r3, #24
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fdbb 	bl	800075a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3304      	adds	r3, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fdb6 	bl	800075a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <xTaskResumeAll+0x124>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca8 <xTaskResumeAll+0x124>)
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <xTaskResumeAll+0x128>)
 8000c0e:	441a      	add	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3304      	adds	r3, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4610      	mov	r0, r2
 8000c18:	f7ff fd42 	bl	80006a0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <xTaskResumeAll+0x12c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d302      	bcc.n	8000c30 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <xTaskResumeAll+0x130>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <xTaskResumeAll+0x120>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1cc      	bne.n	8000bd2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c3e:	f000 f9f9 	bl	8001034 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <xTaskResumeAll+0x134>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d010      	beq.n	8000c70 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c4e:	f000 f837 	bl	8000cc0 <xTaskIncrementTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <xTaskResumeAll+0x130>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f1      	bne.n	8000c4e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <xTaskResumeAll+0x134>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <xTaskResumeAll+0x130>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d009      	beq.n	8000c8c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <xTaskResumeAll+0x138>)
 8000c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c8c:	f000 fbb8 	bl	8001400 <vPortExitCritical>

    return xAlreadyYielded;
 8000c90:	68bb      	ldr	r3, [r7, #8]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001b4 	.word	0x200001b4
 8000ca0:	2000018c 	.word	0x2000018c
 8000ca4:	2000014c 	.word	0x2000014c
 8000ca8:	20000194 	.word	0x20000194
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	2000008c 	.word	0x2000008c
 8000cb4:	200001a0 	.word	0x200001a0
 8000cb8:	2000019c 	.word	0x2000019c
 8000cbc:	e000ed04 	.word	0xe000ed04

08000cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cca:	4b4f      	ldr	r3, [pc, #316]	@ (8000e08 <xTaskIncrementTick+0x148>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 808f 	bne.w	8000df2 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e0c <xTaskIncrementTick+0x14c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8000e0c <xTaskIncrementTick+0x14c>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d121      	bne.n	8000d2c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ce8:	4b49      	ldr	r3, [pc, #292]	@ (8000e10 <xTaskIncrementTick+0x150>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <xTaskIncrementTick+0x4a>
        __asm volatile
 8000cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cf6:	f383 8811 	msr	BASEPRI, r3
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	603b      	str	r3, [r7, #0]
    }
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	e7fd      	b.n	8000d06 <xTaskIncrementTick+0x46>
 8000d0a:	4b41      	ldr	r3, [pc, #260]	@ (8000e10 <xTaskIncrementTick+0x150>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <xTaskIncrementTick+0x154>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a3e      	ldr	r2, [pc, #248]	@ (8000e10 <xTaskIncrementTick+0x150>)
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4a3e      	ldr	r2, [pc, #248]	@ (8000e14 <xTaskIncrementTick+0x154>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <xTaskIncrementTick+0x158>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a3c      	ldr	r2, [pc, #240]	@ (8000e18 <xTaskIncrementTick+0x158>)
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	f000 f984 	bl	8001034 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <xTaskIncrementTick+0x15c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d348      	bcc.n	8000dc8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d36:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <xTaskIncrementTick+0x150>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d104      	bne.n	8000d4a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d40:	4b36      	ldr	r3, [pc, #216]	@ (8000e1c <xTaskIncrementTick+0x15c>)
 8000d42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d46:	601a      	str	r2, [r3, #0]
                    break;
 8000d48:	e03e      	b.n	8000dc8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d4a:	4b31      	ldr	r3, [pc, #196]	@ (8000e10 <xTaskIncrementTick+0x150>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d203      	bcs.n	8000d6a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000d62:	4a2e      	ldr	r2, [pc, #184]	@ (8000e1c <xTaskIncrementTick+0x15c>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000d68:	e02e      	b.n	8000dc8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcf3 	bl	800075a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3318      	adds	r3, #24
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fcea 	bl	800075a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <xTaskIncrementTick+0x160>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <xTaskIncrementTick+0x160>)
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e24 <xTaskIncrementTick+0x164>)
 8000da6:	441a      	add	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3304      	adds	r3, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4610      	mov	r0, r2
 8000db0:	f7ff fc76 	bl	80006a0 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <xTaskIncrementTick+0x168>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3b9      	bcc.n	8000d36 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dc6:	e7b6      	b.n	8000d36 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <xTaskIncrementTick+0x168>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dce:	4915      	ldr	r1, [pc, #84]	@ (8000e24 <xTaskIncrementTick+0x164>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d901      	bls.n	8000de4 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <xTaskIncrementTick+0x16c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d007      	beq.n	8000dfc <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e004      	b.n	8000dfc <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <xTaskIncrementTick+0x170>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <xTaskIncrementTick+0x170>)
 8000dfa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000dfc:	697b      	ldr	r3, [r7, #20]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001b4 	.word	0x200001b4
 8000e0c:	20000190 	.word	0x20000190
 8000e10:	20000144 	.word	0x20000144
 8000e14:	20000148 	.word	0x20000148
 8000e18:	200001a4 	.word	0x200001a4
 8000e1c:	200001ac 	.word	0x200001ac
 8000e20:	20000194 	.word	0x20000194
 8000e24:	20000090 	.word	0x20000090
 8000e28:	2000008c 	.word	0x2000008c
 8000e2c:	200001a0 	.word	0x200001a0
 8000e30:	2000019c 	.word	0x2000019c

08000e34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <vTaskSwitchContext+0xb0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e42:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <vTaskSwitchContext+0xb4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000e48:	e045      	b.n	8000ed6 <vTaskSwitchContext+0xa2>
        xYieldPending = pdFALSE;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <vTaskSwitchContext+0xb4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e50:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <vTaskSwitchContext+0xb8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	f1c3 031f 	rsb	r3, r3, #31
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	4922      	ldr	r1, [pc, #136]	@ (8000ef0 <vTaskSwitchContext+0xbc>)
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10b      	bne.n	8000e92 <vTaskSwitchContext+0x5e>
        __asm volatile
 8000e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e7e:	f383 8811 	msr	BASEPRI, r3
 8000e82:	f3bf 8f6f 	isb	sy
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	607b      	str	r3, [r7, #4]
    }
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	e7fd      	b.n	8000e8e <vTaskSwitchContext+0x5a>
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <vTaskSwitchContext+0xbc>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3308      	adds	r3, #8
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d104      	bne.n	8000ec2 <vTaskSwitchContext+0x8e>
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <vTaskSwitchContext+0xc0>)
 8000eca:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <vTaskSwitchContext+0xc0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	334c      	adds	r3, #76	@ 0x4c
 8000ed2:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <vTaskSwitchContext+0xc4>)
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200001b4 	.word	0x200001b4
 8000ee8:	200001a0 	.word	0x200001a0
 8000eec:	20000194 	.word	0x20000194
 8000ef0:	20000090 	.word	0x20000090
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	20000018 	.word	0x20000018

08000efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f04:	f000 f852 	bl	8000fac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <prvIdleTask+0x28>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d9f9      	bls.n	8000f04 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <prvIdleTask+0x2c>)
 8000f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f20:	e7f0      	b.n	8000f04 <prvIdleTask+0x8>
 8000f22:	bf00      	nop
 8000f24:	20000090 	.word	0x20000090
 8000f28:	e000ed04 	.word	0xe000ed04

08000f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	e00c      	b.n	8000f52 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <prvInitialiseTaskLists+0x60>)
 8000f44:	4413      	add	r3, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fb7d 	bl	8000646 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d9ef      	bls.n	8000f38 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <prvInitialiseTaskLists+0x64>)
 8000f5a:	f7ff fb74 	bl	8000646 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <prvInitialiseTaskLists+0x68>)
 8000f60:	f7ff fb71 	bl	8000646 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <prvInitialiseTaskLists+0x6c>)
 8000f66:	f7ff fb6e 	bl	8000646 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000f6a:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <prvInitialiseTaskLists+0x70>)
 8000f6c:	f7ff fb6b 	bl	8000646 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <prvInitialiseTaskLists+0x74>)
 8000f72:	f7ff fb68 	bl	8000646 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <prvInitialiseTaskLists+0x78>)
 8000f78:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <prvInitialiseTaskLists+0x64>)
 8000f7a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <prvInitialiseTaskLists+0x7c>)
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <prvInitialiseTaskLists+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	2000011c 	.word	0x2000011c
 8000f94:	20000130 	.word	0x20000130
 8000f98:	2000014c 	.word	0x2000014c
 8000f9c:	20000160 	.word	0x20000160
 8000fa0:	20000178 	.word	0x20000178
 8000fa4:	20000144 	.word	0x20000144
 8000fa8:	20000148 	.word	0x20000148

08000fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fb2:	e019      	b.n	8000fe8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000fb4:	f000 f9f2 	bl	800139c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <prvCheckTasksWaitingTermination+0x50>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fbc8 	bl	800075a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <prvCheckTasksWaitingTermination+0x54>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <prvCheckTasksWaitingTermination+0x54>)
 8000fd2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <prvCheckTasksWaitingTermination+0x58>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <prvCheckTasksWaitingTermination+0x58>)
 8000fdc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000fde:	f000 fa0f 	bl	8001400 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f810 	bl	8001008 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <prvCheckTasksWaitingTermination+0x58>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e1      	bne.n	8000fb4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000160 	.word	0x20000160
 8001000:	2000018c 	.word	0x2000018c
 8001004:	20000174 	.word	0x20000174

08001008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	334c      	adds	r3, #76	@ 0x4c
 8001014:	4618      	mov	r0, r3
 8001016:	f000 ff2f 	bl	8001e78 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fb72 	bl	8001708 <vPortFree>
                vPortFree( pxTCB );
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fb6f 	bl	8001708 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <prvResetNextTaskUnblockTime+0x30>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d104      	bne.n	800104c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <prvResetNextTaskUnblockTime+0x34>)
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001048:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800104a:	e005      	b.n	8001058 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <prvResetNextTaskUnblockTime+0x30>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <prvResetNextTaskUnblockTime+0x34>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000144 	.word	0x20000144
 8001068:	200001ac 	.word	0x200001ac

0800106c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <prvAddCurrentTaskToDelayedList+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3304      	adds	r3, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb69 	bl	800075a <uxListRemove>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10b      	bne.n	80010a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	2201      	movs	r2, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <prvAddCurrentTaskToDelayedList+0xb8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4013      	ands	r3, r2
 80010a2:	4a20      	ldr	r2, [pc, #128]	@ (8001124 <prvAddCurrentTaskToDelayedList+0xb8>)
 80010a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010ac:	d10a      	bne.n	80010c4 <prvAddCurrentTaskToDelayedList+0x58>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	481a      	ldr	r0, [pc, #104]	@ (8001128 <prvAddCurrentTaskToDelayedList+0xbc>)
 80010be:	f7ff faef 	bl	80006a0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80010c2:	e026      	b.n	8001112 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d209      	bcs.n	80010f0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <prvAddCurrentTaskToDelayedList+0xc0>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f7ff fafd 	bl	80006e8 <vListInsert>
}
 80010ee:	e010      	b.n	8001112 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <prvAddCurrentTaskToDelayedList+0xc4>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f7ff faf3 	bl	80006e8 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	429a      	cmp	r2, r3
 800110a:	d202      	bcs.n	8001112 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <prvAddCurrentTaskToDelayedList+0xc8>)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000190 	.word	0x20000190
 8001120:	2000008c 	.word	0x2000008c
 8001124:	20000194 	.word	0x20000194
 8001128:	20000178 	.word	0x20000178
 800112c:	20000148 	.word	0x20000148
 8001130:	20000144 	.word	0x20000144
 8001134:	200001ac 	.word	0x200001ac

08001138 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b04      	subs	r3, #4
 8001148:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001150:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3b04      	subs	r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f023 0201 	bic.w	r2, r3, #1
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b04      	subs	r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001168:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <pxPortInitialiseStack+0x64>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b14      	subs	r3, #20
 8001172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3b04      	subs	r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f06f 0202 	mvn.w	r2, #2
 8001186:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3b20      	subs	r3, #32
 800118c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	080011a1 	.word	0x080011a1

080011a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <prvTaskExitError+0x58>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b2:	d00b      	beq.n	80011cc <prvTaskExitError+0x2c>
        __asm volatile
 80011b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b8:	f383 8811 	msr	BASEPRI, r3
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	60fb      	str	r3, [r7, #12]
    }
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <prvTaskExitError+0x28>
        __asm volatile
 80011cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d0:	f383 8811 	msr	BASEPRI, r3
 80011d4:	f3bf 8f6f 	isb	sy
 80011d8:	f3bf 8f4f 	dsb	sy
 80011dc:	60bb      	str	r3, [r7, #8]
    }
 80011de:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80011e0:	bf00      	nop
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0fc      	beq.n	80011e2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	00000000 	.word	0x00000000

08001200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <pxCurrentTCBConst2>)
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	6808      	ldr	r0, [r1, #0]
 8001206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120a:	f380 8809 	msr	PSP, r0
 800120e:	f3bf 8f6f 	isb	sy
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	f380 8811 	msr	BASEPRI, r0
 800121a:	4770      	bx	lr
 800121c:	f3af 8000 	nop.w

08001220 <pxCurrentTCBConst2>:
 8001220:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop

08001228 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001228:	4808      	ldr	r0, [pc, #32]	@ (800124c <prvPortStartFirstTask+0x24>)
 800122a:	6800      	ldr	r0, [r0, #0]
 800122c:	6800      	ldr	r0, [r0, #0]
 800122e:	f380 8808 	msr	MSP, r0
 8001232:	f04f 0000 	mov.w	r0, #0
 8001236:	f380 8814 	msr	CONTROL, r0
 800123a:	b662      	cpsie	i
 800123c:	b661      	cpsie	f
 800123e:	f3bf 8f4f 	dsb	sy
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	df00      	svc	0
 8001248:	bf00      	nop
 800124a:	0000      	.short	0x0000
 800124c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop

08001254 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800125a:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <xPortStartScheduler+0x124>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a47      	ldr	r2, [pc, #284]	@ (800137c <xPortStartScheduler+0x128>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d10b      	bne.n	800127c <xPortStartScheduler+0x28>
        __asm volatile
 8001264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001268:	f383 8811 	msr	BASEPRI, r3
 800126c:	f3bf 8f6f 	isb	sy
 8001270:	f3bf 8f4f 	dsb	sy
 8001274:	613b      	str	r3, [r7, #16]
    }
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800127c:	4b3e      	ldr	r3, [pc, #248]	@ (8001378 <xPortStartScheduler+0x124>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a3f      	ldr	r2, [pc, #252]	@ (8001380 <xPortStartScheduler+0x12c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10b      	bne.n	800129e <xPortStartScheduler+0x4a>
        __asm volatile
 8001286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800128a:	f383 8811 	msr	BASEPRI, r3
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f3bf 8f4f 	dsb	sy
 8001296:	60fb      	str	r3, [r7, #12]
    }
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	e7fd      	b.n	800129a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800129e:	4b39      	ldr	r3, [pc, #228]	@ (8001384 <xPortStartScheduler+0x130>)
 80012a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	22ff      	movs	r2, #255	@ 0xff
 80012ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <xPortStartScheduler+0x134>)
 80012c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80012c6:	4b31      	ldr	r3, [pc, #196]	@ (800138c <xPortStartScheduler+0x138>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012cc:	e009      	b.n	80012e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <xPortStartScheduler+0x138>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <xPortStartScheduler+0x138>)
 80012d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	2b80      	cmp	r3, #128	@ 0x80
 80012ec:	d0ef      	beq.n	80012ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <xPortStartScheduler+0x138>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00b      	beq.n	8001312 <xPortStartScheduler+0xbe>
        __asm volatile
 80012fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012fe:	f383 8811 	msr	BASEPRI, r3
 8001302:	f3bf 8f6f 	isb	sy
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	60bb      	str	r3, [r7, #8]
    }
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	e7fd      	b.n	800130e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <xPortStartScheduler+0x138>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <xPortStartScheduler+0x138>)
 800131a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <xPortStartScheduler+0x138>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001324:	4a19      	ldr	r2, [pc, #100]	@ (800138c <xPortStartScheduler+0x138>)
 8001326:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <xPortStartScheduler+0x13c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <xPortStartScheduler+0x13c>)
 8001336:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <xPortStartScheduler+0x13c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <xPortStartScheduler+0x13c>)
 8001342:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001346:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001348:	f000 f8e0 	bl	800150c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <xPortStartScheduler+0x140>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001352:	f000 f8ff 	bl	8001554 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <xPortStartScheduler+0x144>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <xPortStartScheduler+0x144>)
 800135c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001360:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001362:	f7ff ff61 	bl	8001228 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001366:	f7ff fd65 	bl	8000e34 <vTaskSwitchContext>
    prvTaskExitError();
 800136a:	f7ff ff19 	bl	80011a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	410fc271 	.word	0x410fc271
 8001380:	410fc270 	.word	0x410fc270
 8001384:	e000e400 	.word	0xe000e400
 8001388:	200001b8 	.word	0x200001b8
 800138c:	200001bc 	.word	0x200001bc
 8001390:	e000ed20 	.word	0xe000ed20
 8001394:	20000008 	.word	0x20000008
 8001398:	e000ef34 	.word	0xe000ef34

0800139c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
        __asm volatile
 80013a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013a6:	f383 8811 	msr	BASEPRI, r3
 80013aa:	f3bf 8f6f 	isb	sy
 80013ae:	f3bf 8f4f 	dsb	sy
 80013b2:	607b      	str	r3, [r7, #4]
    }
 80013b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <vPortEnterCritical+0x5c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a0e      	ldr	r2, [pc, #56]	@ (80013f8 <vPortEnterCritical+0x5c>)
 80013be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <vPortEnterCritical+0x5c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d110      	bne.n	80013ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <vPortEnterCritical+0x60>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <vPortEnterCritical+0x4e>
        __asm volatile
 80013d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	f3bf 8f6f 	isb	sy
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	603b      	str	r3, [r7, #0]
    }
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	e7fd      	b.n	80013e6 <vPortEnterCritical+0x4a>
    }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	e000ed04 	.word	0xe000ed04

08001400 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <vPortExitCritical+0x50>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10b      	bne.n	8001426 <vPortExitCritical+0x26>
        __asm volatile
 800140e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001412:	f383 8811 	msr	BASEPRI, r3
 8001416:	f3bf 8f6f 	isb	sy
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	607b      	str	r3, [r7, #4]
    }
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	e7fd      	b.n	8001422 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <vPortExitCritical+0x50>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <vPortExitCritical+0x50>)
 800142e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <vPortExitCritical+0x50>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <vPortExitCritical+0x44>
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001442:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000008 	.word	0x20000008
	...

08001460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001460:	f3ef 8009 	mrs	r0, PSP
 8001464:	f3bf 8f6f 	isb	sy
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <pxCurrentTCBConst>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	f01e 0f10 	tst.w	lr, #16
 8001470:	bf08      	it	eq
 8001472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800147a:	6010      	str	r0, [r2, #0]
 800147c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001484:	f380 8811 	msr	BASEPRI, r0
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	f7ff fcd0 	bl	8000e34 <vTaskSwitchContext>
 8001494:	f04f 0000 	mov.w	r0, #0
 8001498:	f380 8811 	msr	BASEPRI, r0
 800149c:	bc09      	pop	{r0, r3}
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	6808      	ldr	r0, [r1, #0]
 80014a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a6:	f01e 0f10 	tst.w	lr, #16
 80014aa:	bf08      	it	eq
 80014ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80014b0:	f380 8809 	msr	PSP, r0
 80014b4:	f3bf 8f6f 	isb	sy
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w

080014c0 <pxCurrentTCBConst>:
 80014c0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop

080014c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
        __asm volatile
 80014ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014d2:	f383 8811 	msr	BASEPRI, r3
 80014d6:	f3bf 8f6f 	isb	sy
 80014da:	f3bf 8f4f 	dsb	sy
 80014de:	607b      	str	r3, [r7, #4]
    }
 80014e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80014e2:	f7ff fbed 	bl	8000cc0 <xTaskIncrementTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <SysTick_Handler+0x40>)
 80014ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f383 8811 	msr	BASEPRI, r3
    }
 80014fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	e000ed04 	.word	0xe000ed04

0800150c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <vPortSetupTimerInterrupt+0x34>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <vPortSetupTimerInterrupt+0x38>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <vPortSetupTimerInterrupt+0x3c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <vPortSetupTimerInterrupt+0x40>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <vPortSetupTimerInterrupt+0x44>)
 800152a:	3b01      	subs	r3, #1
 800152c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <vPortSetupTimerInterrupt+0x34>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010
 8001544:	e000e018 	.word	0xe000e018
 8001548:	20000000 	.word	0x20000000
 800154c:	10624dd3 	.word	0x10624dd3
 8001550:	e000e014 	.word	0xe000e014

08001554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001564 <vPortEnableVFP+0x10>
 8001558:	6801      	ldr	r1, [r0, #0]
 800155a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800155e:	6001      	str	r1, [r0, #0]
 8001560:	4770      	bx	lr
 8001562:	0000      	.short	0x0000
 8001564:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop

0800156c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001578:	f7ff faf6 	bl	8000b68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800157c:	4b5c      	ldr	r3, [pc, #368]	@ (80016f0 <pvPortMalloc+0x184>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001584:	f000 f924 	bl	80017d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001588:	4b5a      	ldr	r3, [pc, #360]	@ (80016f4 <pvPortMalloc+0x188>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 8095 	bne.w	80016c0 <pvPortMalloc+0x154>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01e      	beq.n	80015da <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800159c:	2208      	movs	r2, #8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d015      	beq.n	80015da <pvPortMalloc+0x6e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f023 0307 	bic.w	r3, r3, #7
 80015b4:	3308      	adds	r3, #8
 80015b6:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <pvPortMalloc+0x6e>
        __asm volatile
 80015c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015c6:	f383 8811 	msr	BASEPRI, r3
 80015ca:	f3bf 8f6f 	isb	sy
 80015ce:	f3bf 8f4f 	dsb	sy
 80015d2:	617b      	str	r3, [r7, #20]
    }
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d06f      	beq.n	80016c0 <pvPortMalloc+0x154>
 80015e0:	4b45      	ldr	r3, [pc, #276]	@ (80016f8 <pvPortMalloc+0x18c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d86a      	bhi.n	80016c0 <pvPortMalloc+0x154>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <pvPortMalloc+0x190>)
 80015ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <pvPortMalloc+0x190>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015f4:	e004      	b.n	8001600 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d903      	bls.n	8001612 <pvPortMalloc+0xa6>
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f1      	bne.n	80015f6 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <pvPortMalloc+0x184>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001618:	429a      	cmp	r2, r3
 800161a:	d051      	beq.n	80016c0 <pvPortMalloc+0x154>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2208      	movs	r2, #8
 8001622:	4413      	add	r3, r2
 8001624:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1ad2      	subs	r2, r2, r3
 8001636:	2308      	movs	r3, #8
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	429a      	cmp	r2, r3
 800163c:	d920      	bls.n	8001680 <pvPortMalloc+0x114>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800163e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00b      	beq.n	8001668 <pvPortMalloc+0xfc>
        __asm volatile
 8001650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001654:	f383 8811 	msr	BASEPRI, r3
 8001658:	f3bf 8f6f 	isb	sy
 800165c:	f3bf 8f4f 	dsb	sy
 8001660:	613b      	str	r3, [r7, #16]
    }
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <pvPortMalloc+0xf8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800167a:	69b8      	ldr	r0, [r7, #24]
 800167c:	f000 f90a 	bl	8001894 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <pvPortMalloc+0x18c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a1b      	ldr	r2, [pc, #108]	@ (80016f8 <pvPortMalloc+0x18c>)
 800168c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <pvPortMalloc+0x18c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <pvPortMalloc+0x194>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d203      	bcs.n	80016a2 <pvPortMalloc+0x136>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <pvPortMalloc+0x18c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <pvPortMalloc+0x194>)
 80016a0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <pvPortMalloc+0x188>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <pvPortMalloc+0x198>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <pvPortMalloc+0x198>)
 80016be:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80016c0:	f7ff fa60 	bl	8000b84 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <pvPortMalloc+0x17a>
        __asm volatile
 80016ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	60fb      	str	r3, [r7, #12]
    }
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <pvPortMalloc+0x176>
    return pvReturn;
 80016e6:	69fb      	ldr	r3, [r7, #28]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3728      	adds	r7, #40	@ 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20003dc8 	.word	0x20003dc8
 80016f4:	20003ddc 	.word	0x20003ddc
 80016f8:	20003dcc 	.word	0x20003dcc
 80016fc:	20003dc0 	.word	0x20003dc0
 8001700:	20003dd0 	.word	0x20003dd0
 8001704:	20003dd4 	.word	0x20003dd4

08001708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d04f      	beq.n	80017ba <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800171a:	2308      	movs	r3, #8
 800171c:	425b      	negs	r3, r3
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <vPortFree+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10b      	bne.n	800174e <vPortFree+0x46>
        __asm volatile
 8001736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800173a:	f383 8811 	msr	BASEPRI, r3
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	60fb      	str	r3, [r7, #12]
    }
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <vPortFree+0x66>
        __asm volatile
 8001756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	60bb      	str	r3, [r7, #8]
    }
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <vPortFree+0xbc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01e      	beq.n	80017ba <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d11a      	bne.n	80017ba <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <vPortFree+0xbc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001794:	f7ff f9e8 	bl	8000b68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <vPortFree+0xc0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <vPortFree+0xc0>)
 80017a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017a6:	6938      	ldr	r0, [r7, #16]
 80017a8:	f000 f874 	bl	8001894 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <vPortFree+0xc4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <vPortFree+0xc4>)
 80017b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80017b6:	f7ff f9e5 	bl	8000b84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20003ddc 	.word	0x20003ddc
 80017c8:	20003dcc 	.word	0x20003dcc
 80017cc:	20003dd8 	.word	0x20003dd8

080017d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80017da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <prvHeapInit+0xac>)
 80017de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3307      	adds	r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <prvHeapInit+0xac>)
 8001800:	4413      	add	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001808:	4a1d      	ldr	r2, [pc, #116]	@ (8001880 <prvHeapInit+0xb0>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <prvHeapInit+0xb0>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800181c:	2208      	movs	r2, #8
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 0307 	bic.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a15      	ldr	r2, [pc, #84]	@ (8001884 <prvHeapInit+0xb4>)
 8001830:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <prvHeapInit+0xb4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <prvHeapInit+0xb4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <prvHeapInit+0xb4>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <prvHeapInit+0xb8>)
 800185e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a09      	ldr	r2, [pc, #36]	@ (800188c <prvHeapInit+0xbc>)
 8001866:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <prvHeapInit+0xc0>)
 800186a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200001c0 	.word	0x200001c0
 8001880:	20003dc0 	.word	0x20003dc0
 8001884:	20003dc8 	.word	0x20003dc8
 8001888:	20003dd0 	.word	0x20003dd0
 800188c:	20003dcc 	.word	0x20003dcc
 8001890:	20003ddc 	.word	0x20003ddc

08001894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800189c:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <prvInsertBlockIntoFreeList+0xac>)
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e002      	b.n	80018a8 <prvInsertBlockIntoFreeList+0x14>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d8f7      	bhi.n	80018a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4413      	add	r3, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d108      	bne.n	80018d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	441a      	add	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	441a      	add	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d118      	bne.n	800191c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <prvInsertBlockIntoFreeList+0xb0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d00d      	beq.n	8001912 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	441a      	add	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e008      	b.n	8001924 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <prvInsertBlockIntoFreeList+0xb0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e003      	b.n	8001924 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	d002      	beq.n	8001932 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20003dc0 	.word	0x20003dc0
 8001944:	20003dc8 	.word	0x20003dc8

08001948 <atoi>:
 8001948:	220a      	movs	r2, #10
 800194a:	2100      	movs	r1, #0
 800194c:	f000 b87a 	b.w	8001a44 <strtol>

08001950 <_strtol_l.constprop.0>:
 8001950:	2b24      	cmp	r3, #36	@ 0x24
 8001952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001956:	4686      	mov	lr, r0
 8001958:	4690      	mov	r8, r2
 800195a:	d801      	bhi.n	8001960 <_strtol_l.constprop.0+0x10>
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <_strtol_l.constprop.0+0x1e>
 8001960:	f000 fb16 	bl	8001f90 <__errno>
 8001964:	2316      	movs	r3, #22
 8001966:	6003      	str	r3, [r0, #0]
 8001968:	2000      	movs	r0, #0
 800196a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800196e:	4834      	ldr	r0, [pc, #208]	@ (8001a40 <_strtol_l.constprop.0+0xf0>)
 8001970:	460d      	mov	r5, r1
 8001972:	462a      	mov	r2, r5
 8001974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001978:	5d06      	ldrb	r6, [r0, r4]
 800197a:	f016 0608 	ands.w	r6, r6, #8
 800197e:	d1f8      	bne.n	8001972 <_strtol_l.constprop.0+0x22>
 8001980:	2c2d      	cmp	r4, #45	@ 0x2d
 8001982:	d12d      	bne.n	80019e0 <_strtol_l.constprop.0+0x90>
 8001984:	782c      	ldrb	r4, [r5, #0]
 8001986:	2601      	movs	r6, #1
 8001988:	1c95      	adds	r5, r2, #2
 800198a:	f033 0210 	bics.w	r2, r3, #16
 800198e:	d109      	bne.n	80019a4 <_strtol_l.constprop.0+0x54>
 8001990:	2c30      	cmp	r4, #48	@ 0x30
 8001992:	d12a      	bne.n	80019ea <_strtol_l.constprop.0+0x9a>
 8001994:	782a      	ldrb	r2, [r5, #0]
 8001996:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800199a:	2a58      	cmp	r2, #88	@ 0x58
 800199c:	d125      	bne.n	80019ea <_strtol_l.constprop.0+0x9a>
 800199e:	786c      	ldrb	r4, [r5, #1]
 80019a0:	2310      	movs	r3, #16
 80019a2:	3502      	adds	r5, #2
 80019a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80019a8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80019ac:	2200      	movs	r2, #0
 80019ae:	fbbc f9f3 	udiv	r9, ip, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80019b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80019bc:	2f09      	cmp	r7, #9
 80019be:	d81b      	bhi.n	80019f8 <_strtol_l.constprop.0+0xa8>
 80019c0:	463c      	mov	r4, r7
 80019c2:	42a3      	cmp	r3, r4
 80019c4:	dd27      	ble.n	8001a16 <_strtol_l.constprop.0+0xc6>
 80019c6:	1c57      	adds	r7, r2, #1
 80019c8:	d007      	beq.n	80019da <_strtol_l.constprop.0+0x8a>
 80019ca:	4581      	cmp	r9, r0
 80019cc:	d320      	bcc.n	8001a10 <_strtol_l.constprop.0+0xc0>
 80019ce:	d101      	bne.n	80019d4 <_strtol_l.constprop.0+0x84>
 80019d0:	45a2      	cmp	sl, r4
 80019d2:	db1d      	blt.n	8001a10 <_strtol_l.constprop.0+0xc0>
 80019d4:	fb00 4003 	mla	r0, r0, r3, r4
 80019d8:	2201      	movs	r2, #1
 80019da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80019de:	e7eb      	b.n	80019b8 <_strtol_l.constprop.0+0x68>
 80019e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80019e2:	bf04      	itt	eq
 80019e4:	782c      	ldrbeq	r4, [r5, #0]
 80019e6:	1c95      	addeq	r5, r2, #2
 80019e8:	e7cf      	b.n	800198a <_strtol_l.constprop.0+0x3a>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1da      	bne.n	80019a4 <_strtol_l.constprop.0+0x54>
 80019ee:	2c30      	cmp	r4, #48	@ 0x30
 80019f0:	bf0c      	ite	eq
 80019f2:	2308      	moveq	r3, #8
 80019f4:	230a      	movne	r3, #10
 80019f6:	e7d5      	b.n	80019a4 <_strtol_l.constprop.0+0x54>
 80019f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80019fc:	2f19      	cmp	r7, #25
 80019fe:	d801      	bhi.n	8001a04 <_strtol_l.constprop.0+0xb4>
 8001a00:	3c37      	subs	r4, #55	@ 0x37
 8001a02:	e7de      	b.n	80019c2 <_strtol_l.constprop.0+0x72>
 8001a04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001a08:	2f19      	cmp	r7, #25
 8001a0a:	d804      	bhi.n	8001a16 <_strtol_l.constprop.0+0xc6>
 8001a0c:	3c57      	subs	r4, #87	@ 0x57
 8001a0e:	e7d8      	b.n	80019c2 <_strtol_l.constprop.0+0x72>
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a14:	e7e1      	b.n	80019da <_strtol_l.constprop.0+0x8a>
 8001a16:	1c53      	adds	r3, r2, #1
 8001a18:	d108      	bne.n	8001a2c <_strtol_l.constprop.0+0xdc>
 8001a1a:	2322      	movs	r3, #34	@ 0x22
 8001a1c:	f8ce 3000 	str.w	r3, [lr]
 8001a20:	4660      	mov	r0, ip
 8001a22:	f1b8 0f00 	cmp.w	r8, #0
 8001a26:	d0a0      	beq.n	800196a <_strtol_l.constprop.0+0x1a>
 8001a28:	1e69      	subs	r1, r5, #1
 8001a2a:	e006      	b.n	8001a3a <_strtol_l.constprop.0+0xea>
 8001a2c:	b106      	cbz	r6, 8001a30 <_strtol_l.constprop.0+0xe0>
 8001a2e:	4240      	negs	r0, r0
 8001a30:	f1b8 0f00 	cmp.w	r8, #0
 8001a34:	d099      	beq.n	800196a <_strtol_l.constprop.0+0x1a>
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d1f6      	bne.n	8001a28 <_strtol_l.constprop.0+0xd8>
 8001a3a:	f8c8 1000 	str.w	r1, [r8]
 8001a3e:	e794      	b.n	800196a <_strtol_l.constprop.0+0x1a>
 8001a40:	080024ce 	.word	0x080024ce

08001a44 <strtol>:
 8001a44:	4613      	mov	r3, r2
 8001a46:	460a      	mov	r2, r1
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <strtol+0x10>)
 8001a4c:	6800      	ldr	r0, [r0, #0]
 8001a4e:	f7ff bf7f 	b.w	8001950 <_strtol_l.constprop.0>
 8001a52:	bf00      	nop
 8001a54:	20000018 	.word	0x20000018

08001a58 <std>:
 8001a58:	2300      	movs	r3, #0
 8001a5a:	b510      	push	{r4, lr}
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8001a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a66:	6083      	str	r3, [r0, #8]
 8001a68:	8181      	strh	r1, [r0, #12]
 8001a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001a6c:	81c2      	strh	r2, [r0, #14]
 8001a6e:	6183      	str	r3, [r0, #24]
 8001a70:	4619      	mov	r1, r3
 8001a72:	2208      	movs	r2, #8
 8001a74:	305c      	adds	r0, #92	@ 0x5c
 8001a76:	f000 f9e7 	bl	8001e48 <memset>
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <std+0x58>)
 8001a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <std+0x5c>)
 8001a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a82:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <std+0x60>)
 8001a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <std+0x64>)
 8001a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <std+0x68>)
 8001a8c:	6224      	str	r4, [r4, #32]
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	d006      	beq.n	8001aa0 <std+0x48>
 8001a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a96:	4294      	cmp	r4, r2
 8001a98:	d002      	beq.n	8001aa0 <std+0x48>
 8001a9a:	33d0      	adds	r3, #208	@ 0xd0
 8001a9c:	429c      	cmp	r4, r3
 8001a9e:	d105      	bne.n	8001aac <std+0x54>
 8001aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aa8:	f000 ba9c 	b.w	8001fe4 <__retarget_lock_init_recursive>
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	bf00      	nop
 8001ab0:	08001c99 	.word	0x08001c99
 8001ab4:	08001cbb 	.word	0x08001cbb
 8001ab8:	08001cf3 	.word	0x08001cf3
 8001abc:	08001d17 	.word	0x08001d17
 8001ac0:	20003de0 	.word	0x20003de0

08001ac4 <stdio_exit_handler>:
 8001ac4:	4a02      	ldr	r2, [pc, #8]	@ (8001ad0 <stdio_exit_handler+0xc>)
 8001ac6:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <stdio_exit_handler+0x10>)
 8001ac8:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <stdio_exit_handler+0x14>)
 8001aca:	f000 b869 	b.w	8001ba0 <_fwalk_sglue>
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	080022e5 	.word	0x080022e5
 8001ad8:	2000001c 	.word	0x2000001c

08001adc <cleanup_stdio>:
 8001adc:	6841      	ldr	r1, [r0, #4]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <cleanup_stdio+0x34>)
 8001ae0:	4299      	cmp	r1, r3
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	d001      	beq.n	8001aec <cleanup_stdio+0x10>
 8001ae8:	f000 fbfc 	bl	80022e4 <_fflush_r>
 8001aec:	68a1      	ldr	r1, [r4, #8]
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <cleanup_stdio+0x38>)
 8001af0:	4299      	cmp	r1, r3
 8001af2:	d002      	beq.n	8001afa <cleanup_stdio+0x1e>
 8001af4:	4620      	mov	r0, r4
 8001af6:	f000 fbf5 	bl	80022e4 <_fflush_r>
 8001afa:	68e1      	ldr	r1, [r4, #12]
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <cleanup_stdio+0x3c>)
 8001afe:	4299      	cmp	r1, r3
 8001b00:	d004      	beq.n	8001b0c <cleanup_stdio+0x30>
 8001b02:	4620      	mov	r0, r4
 8001b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b08:	f000 bbec 	b.w	80022e4 <_fflush_r>
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	bf00      	nop
 8001b10:	20003de0 	.word	0x20003de0
 8001b14:	20003e48 	.word	0x20003e48
 8001b18:	20003eb0 	.word	0x20003eb0

08001b1c <global_stdio_init.part.0>:
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <global_stdio_init.part.0+0x30>)
 8001b20:	4c0b      	ldr	r4, [pc, #44]	@ (8001b50 <global_stdio_init.part.0+0x34>)
 8001b22:	4a0c      	ldr	r2, [pc, #48]	@ (8001b54 <global_stdio_init.part.0+0x38>)
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4620      	mov	r0, r4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	f7ff ff94 	bl	8001a58 <std>
 8001b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001b34:	2201      	movs	r2, #1
 8001b36:	2109      	movs	r1, #9
 8001b38:	f7ff ff8e 	bl	8001a58 <std>
 8001b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001b40:	2202      	movs	r2, #2
 8001b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b46:	2112      	movs	r1, #18
 8001b48:	f7ff bf86 	b.w	8001a58 <std>
 8001b4c:	20003f18 	.word	0x20003f18
 8001b50:	20003de0 	.word	0x20003de0
 8001b54:	08001ac5 	.word	0x08001ac5

08001b58 <__sfp_lock_acquire>:
 8001b58:	4801      	ldr	r0, [pc, #4]	@ (8001b60 <__sfp_lock_acquire+0x8>)
 8001b5a:	f000 ba44 	b.w	8001fe6 <__retarget_lock_acquire_recursive>
 8001b5e:	bf00      	nop
 8001b60:	20003f21 	.word	0x20003f21

08001b64 <__sfp_lock_release>:
 8001b64:	4801      	ldr	r0, [pc, #4]	@ (8001b6c <__sfp_lock_release+0x8>)
 8001b66:	f000 ba3f 	b.w	8001fe8 <__retarget_lock_release_recursive>
 8001b6a:	bf00      	nop
 8001b6c:	20003f21 	.word	0x20003f21

08001b70 <__sinit>:
 8001b70:	b510      	push	{r4, lr}
 8001b72:	4604      	mov	r4, r0
 8001b74:	f7ff fff0 	bl	8001b58 <__sfp_lock_acquire>
 8001b78:	6a23      	ldr	r3, [r4, #32]
 8001b7a:	b11b      	cbz	r3, 8001b84 <__sinit+0x14>
 8001b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b80:	f7ff bff0 	b.w	8001b64 <__sfp_lock_release>
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <__sinit+0x28>)
 8001b86:	6223      	str	r3, [r4, #32]
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__sinit+0x2c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f5      	bne.n	8001b7c <__sinit+0xc>
 8001b90:	f7ff ffc4 	bl	8001b1c <global_stdio_init.part.0>
 8001b94:	e7f2      	b.n	8001b7c <__sinit+0xc>
 8001b96:	bf00      	nop
 8001b98:	08001add 	.word	0x08001add
 8001b9c:	20003f18 	.word	0x20003f18

08001ba0 <_fwalk_sglue>:
 8001ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba4:	4607      	mov	r7, r0
 8001ba6:	4688      	mov	r8, r1
 8001ba8:	4614      	mov	r4, r2
 8001baa:	2600      	movs	r6, #0
 8001bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8001bb4:	d505      	bpl.n	8001bc2 <_fwalk_sglue+0x22>
 8001bb6:	6824      	ldr	r4, [r4, #0]
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	d1f7      	bne.n	8001bac <_fwalk_sglue+0xc>
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bc2:	89ab      	ldrh	r3, [r5, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d907      	bls.n	8001bd8 <_fwalk_sglue+0x38>
 8001bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	d003      	beq.n	8001bd8 <_fwalk_sglue+0x38>
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	47c0      	blx	r8
 8001bd6:	4306      	orrs	r6, r0
 8001bd8:	3568      	adds	r5, #104	@ 0x68
 8001bda:	e7e9      	b.n	8001bb0 <_fwalk_sglue+0x10>

08001bdc <_puts_r>:
 8001bdc:	6a03      	ldr	r3, [r0, #32]
 8001bde:	b570      	push	{r4, r5, r6, lr}
 8001be0:	6884      	ldr	r4, [r0, #8]
 8001be2:	4605      	mov	r5, r0
 8001be4:	460e      	mov	r6, r1
 8001be6:	b90b      	cbnz	r3, 8001bec <_puts_r+0x10>
 8001be8:	f7ff ffc2 	bl	8001b70 <__sinit>
 8001bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bee:	07db      	lsls	r3, r3, #31
 8001bf0:	d405      	bmi.n	8001bfe <_puts_r+0x22>
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	0598      	lsls	r0, r3, #22
 8001bf6:	d402      	bmi.n	8001bfe <_puts_r+0x22>
 8001bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bfa:	f000 f9f4 	bl	8001fe6 <__retarget_lock_acquire_recursive>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	0719      	lsls	r1, r3, #28
 8001c02:	d502      	bpl.n	8001c0a <_puts_r+0x2e>
 8001c04:	6923      	ldr	r3, [r4, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d135      	bne.n	8001c76 <_puts_r+0x9a>
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f000 f8c5 	bl	8001d9c <__swsetup_r>
 8001c12:	b380      	cbz	r0, 8001c76 <_puts_r+0x9a>
 8001c14:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c1a:	07da      	lsls	r2, r3, #31
 8001c1c:	d405      	bmi.n	8001c2a <_puts_r+0x4e>
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	059b      	lsls	r3, r3, #22
 8001c22:	d402      	bmi.n	8001c2a <_puts_r+0x4e>
 8001c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c26:	f000 f9df 	bl	8001fe8 <__retarget_lock_release_recursive>
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da04      	bge.n	8001c3c <_puts_r+0x60>
 8001c32:	69a2      	ldr	r2, [r4, #24]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dc17      	bgt.n	8001c68 <_puts_r+0x8c>
 8001c38:	290a      	cmp	r1, #10
 8001c3a:	d015      	beq.n	8001c68 <_puts_r+0x8c>
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	6022      	str	r2, [r4, #0]
 8001c42:	7019      	strb	r1, [r3, #0]
 8001c44:	68a3      	ldr	r3, [r4, #8]
 8001c46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60a3      	str	r3, [r4, #8]
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d1ed      	bne.n	8001c2e <_puts_r+0x52>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da11      	bge.n	8001c7a <_puts_r+0x9e>
 8001c56:	4622      	mov	r2, r4
 8001c58:	210a      	movs	r1, #10
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f000 f85f 	bl	8001d1e <__swbuf_r>
 8001c60:	3001      	adds	r0, #1
 8001c62:	d0d7      	beq.n	8001c14 <_puts_r+0x38>
 8001c64:	250a      	movs	r5, #10
 8001c66:	e7d7      	b.n	8001c18 <_puts_r+0x3c>
 8001c68:	4622      	mov	r2, r4
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f000 f857 	bl	8001d1e <__swbuf_r>
 8001c70:	3001      	adds	r0, #1
 8001c72:	d1e7      	bne.n	8001c44 <_puts_r+0x68>
 8001c74:	e7ce      	b.n	8001c14 <_puts_r+0x38>
 8001c76:	3e01      	subs	r6, #1
 8001c78:	e7e4      	b.n	8001c44 <_puts_r+0x68>
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	6022      	str	r2, [r4, #0]
 8001c80:	220a      	movs	r2, #10
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e7ee      	b.n	8001c64 <_puts_r+0x88>
	...

08001c88 <puts>:
 8001c88:	4b02      	ldr	r3, [pc, #8]	@ (8001c94 <puts+0xc>)
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f7ff bfa5 	b.w	8001bdc <_puts_r>
 8001c92:	bf00      	nop
 8001c94:	20000018 	.word	0x20000018

08001c98 <__sread>:
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca0:	f000 f952 	bl	8001f48 <_read_r>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	bfab      	itete	ge
 8001ca8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001caa:	89a3      	ldrhlt	r3, [r4, #12]
 8001cac:	181b      	addge	r3, r3, r0
 8001cae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001cb2:	bfac      	ite	ge
 8001cb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001cb6:	81a3      	strhlt	r3, [r4, #12]
 8001cb8:	bd10      	pop	{r4, pc}

08001cba <__swrite>:
 8001cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cbe:	461f      	mov	r7, r3
 8001cc0:	898b      	ldrh	r3, [r1, #12]
 8001cc2:	05db      	lsls	r3, r3, #23
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	4616      	mov	r6, r2
 8001cca:	d505      	bpl.n	8001cd8 <__swrite+0x1e>
 8001ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f000 f926 	bl	8001f24 <_lseek_r>
 8001cd8:	89a3      	ldrh	r3, [r4, #12]
 8001cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ce2:	81a3      	strh	r3, [r4, #12]
 8001ce4:	4632      	mov	r2, r6
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4628      	mov	r0, r5
 8001cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cee:	f000 b93d 	b.w	8001f6c <_write_r>

08001cf2 <__sseek>:
 8001cf2:	b510      	push	{r4, lr}
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cfa:	f000 f913 	bl	8001f24 <_lseek_r>
 8001cfe:	1c43      	adds	r3, r0, #1
 8001d00:	89a3      	ldrh	r3, [r4, #12]
 8001d02:	bf15      	itete	ne
 8001d04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d0e:	81a3      	strheq	r3, [r4, #12]
 8001d10:	bf18      	it	ne
 8001d12:	81a3      	strhne	r3, [r4, #12]
 8001d14:	bd10      	pop	{r4, pc}

08001d16 <__sclose>:
 8001d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d1a:	f000 b89d 	b.w	8001e58 <_close_r>

08001d1e <__swbuf_r>:
 8001d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d20:	460e      	mov	r6, r1
 8001d22:	4614      	mov	r4, r2
 8001d24:	4605      	mov	r5, r0
 8001d26:	b118      	cbz	r0, 8001d30 <__swbuf_r+0x12>
 8001d28:	6a03      	ldr	r3, [r0, #32]
 8001d2a:	b90b      	cbnz	r3, 8001d30 <__swbuf_r+0x12>
 8001d2c:	f7ff ff20 	bl	8001b70 <__sinit>
 8001d30:	69a3      	ldr	r3, [r4, #24]
 8001d32:	60a3      	str	r3, [r4, #8]
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	071a      	lsls	r2, r3, #28
 8001d38:	d501      	bpl.n	8001d3e <__swbuf_r+0x20>
 8001d3a:	6923      	ldr	r3, [r4, #16]
 8001d3c:	b943      	cbnz	r3, 8001d50 <__swbuf_r+0x32>
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4628      	mov	r0, r5
 8001d42:	f000 f82b 	bl	8001d9c <__swsetup_r>
 8001d46:	b118      	cbz	r0, 8001d50 <__swbuf_r+0x32>
 8001d48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	6922      	ldr	r2, [r4, #16]
 8001d54:	1a98      	subs	r0, r3, r2
 8001d56:	6963      	ldr	r3, [r4, #20]
 8001d58:	b2f6      	uxtb	r6, r6
 8001d5a:	4283      	cmp	r3, r0
 8001d5c:	4637      	mov	r7, r6
 8001d5e:	dc05      	bgt.n	8001d6c <__swbuf_r+0x4e>
 8001d60:	4621      	mov	r1, r4
 8001d62:	4628      	mov	r0, r5
 8001d64:	f000 fabe 	bl	80022e4 <_fflush_r>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d1ed      	bne.n	8001d48 <__swbuf_r+0x2a>
 8001d6c:	68a3      	ldr	r3, [r4, #8]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	60a3      	str	r3, [r4, #8]
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	6022      	str	r2, [r4, #0]
 8001d78:	701e      	strb	r6, [r3, #0]
 8001d7a:	6962      	ldr	r2, [r4, #20]
 8001d7c:	1c43      	adds	r3, r0, #1
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d004      	beq.n	8001d8c <__swbuf_r+0x6e>
 8001d82:	89a3      	ldrh	r3, [r4, #12]
 8001d84:	07db      	lsls	r3, r3, #31
 8001d86:	d5e1      	bpl.n	8001d4c <__swbuf_r+0x2e>
 8001d88:	2e0a      	cmp	r6, #10
 8001d8a:	d1df      	bne.n	8001d4c <__swbuf_r+0x2e>
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f000 faa8 	bl	80022e4 <_fflush_r>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d0d9      	beq.n	8001d4c <__swbuf_r+0x2e>
 8001d98:	e7d6      	b.n	8001d48 <__swbuf_r+0x2a>
	...

08001d9c <__swsetup_r>:
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <__swsetup_r+0xa8>)
 8001da0:	4605      	mov	r5, r0
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	460c      	mov	r4, r1
 8001da6:	b118      	cbz	r0, 8001db0 <__swsetup_r+0x14>
 8001da8:	6a03      	ldr	r3, [r0, #32]
 8001daa:	b90b      	cbnz	r3, 8001db0 <__swsetup_r+0x14>
 8001dac:	f7ff fee0 	bl	8001b70 <__sinit>
 8001db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db4:	0719      	lsls	r1, r3, #28
 8001db6:	d422      	bmi.n	8001dfe <__swsetup_r+0x62>
 8001db8:	06da      	lsls	r2, r3, #27
 8001dba:	d407      	bmi.n	8001dcc <__swsetup_r+0x30>
 8001dbc:	2209      	movs	r2, #9
 8001dbe:	602a      	str	r2, [r5, #0]
 8001dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc4:	81a3      	strh	r3, [r4, #12]
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dca:	e033      	b.n	8001e34 <__swsetup_r+0x98>
 8001dcc:	0758      	lsls	r0, r3, #29
 8001dce:	d512      	bpl.n	8001df6 <__swsetup_r+0x5a>
 8001dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dd2:	b141      	cbz	r1, 8001de6 <__swsetup_r+0x4a>
 8001dd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001dd8:	4299      	cmp	r1, r3
 8001dda:	d002      	beq.n	8001de2 <__swsetup_r+0x46>
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f000 f905 	bl	8001fec <_free_r>
 8001de2:	2300      	movs	r3, #0
 8001de4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001de6:	89a3      	ldrh	r3, [r4, #12]
 8001de8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001dec:	81a3      	strh	r3, [r4, #12]
 8001dee:	2300      	movs	r3, #0
 8001df0:	6063      	str	r3, [r4, #4]
 8001df2:	6923      	ldr	r3, [r4, #16]
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	89a3      	ldrh	r3, [r4, #12]
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	81a3      	strh	r3, [r4, #12]
 8001dfe:	6923      	ldr	r3, [r4, #16]
 8001e00:	b94b      	cbnz	r3, 8001e16 <__swsetup_r+0x7a>
 8001e02:	89a3      	ldrh	r3, [r4, #12]
 8001e04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e0c:	d003      	beq.n	8001e16 <__swsetup_r+0x7a>
 8001e0e:	4621      	mov	r1, r4
 8001e10:	4628      	mov	r0, r5
 8001e12:	f000 fab5 	bl	8002380 <__smakebuf_r>
 8001e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e1a:	f013 0201 	ands.w	r2, r3, #1
 8001e1e:	d00a      	beq.n	8001e36 <__swsetup_r+0x9a>
 8001e20:	2200      	movs	r2, #0
 8001e22:	60a2      	str	r2, [r4, #8]
 8001e24:	6962      	ldr	r2, [r4, #20]
 8001e26:	4252      	negs	r2, r2
 8001e28:	61a2      	str	r2, [r4, #24]
 8001e2a:	6922      	ldr	r2, [r4, #16]
 8001e2c:	b942      	cbnz	r2, 8001e40 <__swsetup_r+0xa4>
 8001e2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e32:	d1c5      	bne.n	8001dc0 <__swsetup_r+0x24>
 8001e34:	bd38      	pop	{r3, r4, r5, pc}
 8001e36:	0799      	lsls	r1, r3, #30
 8001e38:	bf58      	it	pl
 8001e3a:	6962      	ldrpl	r2, [r4, #20]
 8001e3c:	60a2      	str	r2, [r4, #8]
 8001e3e:	e7f4      	b.n	8001e2a <__swsetup_r+0x8e>
 8001e40:	2000      	movs	r0, #0
 8001e42:	e7f7      	b.n	8001e34 <__swsetup_r+0x98>
 8001e44:	20000018 	.word	0x20000018

08001e48 <memset>:
 8001e48:	4402      	add	r2, r0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <memset+0xa>
 8001e50:	4770      	bx	lr
 8001e52:	f803 1b01 	strb.w	r1, [r3], #1
 8001e56:	e7f9      	b.n	8001e4c <memset+0x4>

08001e58 <_close_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4d06      	ldr	r5, [pc, #24]	@ (8001e74 <_close_r+0x1c>)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4608      	mov	r0, r1
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	f7fe fb1b 	bl	800049e <_close>
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	d102      	bne.n	8001e72 <_close_r+0x1a>
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	b103      	cbz	r3, 8001e72 <_close_r+0x1a>
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	20003f1c 	.word	0x20003f1c

08001e78 <_reclaim_reent>:
 8001e78:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <_reclaim_reent+0xa8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4283      	cmp	r3, r0
 8001e7e:	b570      	push	{r4, r5, r6, lr}
 8001e80:	4604      	mov	r4, r0
 8001e82:	d04b      	beq.n	8001f1c <_reclaim_reent+0xa4>
 8001e84:	69c3      	ldr	r3, [r0, #28]
 8001e86:	b1ab      	cbz	r3, 8001eb4 <_reclaim_reent+0x3c>
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	b16b      	cbz	r3, 8001ea8 <_reclaim_reent+0x30>
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	69e3      	ldr	r3, [r4, #28]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	5959      	ldr	r1, [r3, r5]
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d13b      	bne.n	8001f10 <_reclaim_reent+0x98>
 8001e98:	3504      	adds	r5, #4
 8001e9a:	2d80      	cmp	r5, #128	@ 0x80
 8001e9c:	d1f7      	bne.n	8001e8e <_reclaim_reent+0x16>
 8001e9e:	69e3      	ldr	r3, [r4, #28]
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	68d9      	ldr	r1, [r3, #12]
 8001ea4:	f000 f8a2 	bl	8001fec <_free_r>
 8001ea8:	69e3      	ldr	r3, [r4, #28]
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	b111      	cbz	r1, 8001eb4 <_reclaim_reent+0x3c>
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f000 f89c 	bl	8001fec <_free_r>
 8001eb4:	6961      	ldr	r1, [r4, #20]
 8001eb6:	b111      	cbz	r1, 8001ebe <_reclaim_reent+0x46>
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f000 f897 	bl	8001fec <_free_r>
 8001ebe:	69e1      	ldr	r1, [r4, #28]
 8001ec0:	b111      	cbz	r1, 8001ec8 <_reclaim_reent+0x50>
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f000 f892 	bl	8001fec <_free_r>
 8001ec8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001eca:	b111      	cbz	r1, 8001ed2 <_reclaim_reent+0x5a>
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f000 f88d 	bl	8001fec <_free_r>
 8001ed2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ed4:	b111      	cbz	r1, 8001edc <_reclaim_reent+0x64>
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 f888 	bl	8001fec <_free_r>
 8001edc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001ede:	b111      	cbz	r1, 8001ee6 <_reclaim_reent+0x6e>
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f000 f883 	bl	8001fec <_free_r>
 8001ee6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001ee8:	b111      	cbz	r1, 8001ef0 <_reclaim_reent+0x78>
 8001eea:	4620      	mov	r0, r4
 8001eec:	f000 f87e 	bl	8001fec <_free_r>
 8001ef0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001ef2:	b111      	cbz	r1, 8001efa <_reclaim_reent+0x82>
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f000 f879 	bl	8001fec <_free_r>
 8001efa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001efc:	b111      	cbz	r1, 8001f04 <_reclaim_reent+0x8c>
 8001efe:	4620      	mov	r0, r4
 8001f00:	f000 f874 	bl	8001fec <_free_r>
 8001f04:	6a23      	ldr	r3, [r4, #32]
 8001f06:	b14b      	cbz	r3, 8001f1c <_reclaim_reent+0xa4>
 8001f08:	4620      	mov	r0, r4
 8001f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f0e:	4718      	bx	r3
 8001f10:	680e      	ldr	r6, [r1, #0]
 8001f12:	4620      	mov	r0, r4
 8001f14:	f000 f86a 	bl	8001fec <_free_r>
 8001f18:	4631      	mov	r1, r6
 8001f1a:	e7bb      	b.n	8001e94 <_reclaim_reent+0x1c>
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000018 	.word	0x20000018

08001f24 <_lseek_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4d07      	ldr	r5, [pc, #28]	@ (8001f44 <_lseek_r+0x20>)
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	602a      	str	r2, [r5, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7fe fada 	bl	80004ec <_lseek>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d102      	bne.n	8001f42 <_lseek_r+0x1e>
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	b103      	cbz	r3, 8001f42 <_lseek_r+0x1e>
 8001f40:	6023      	str	r3, [r4, #0]
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	20003f1c 	.word	0x20003f1c

08001f48 <_read_r>:
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	4d07      	ldr	r5, [pc, #28]	@ (8001f68 <_read_r+0x20>)
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4611      	mov	r1, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	602a      	str	r2, [r5, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f7fe fa68 	bl	800042c <_read>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	d102      	bne.n	8001f66 <_read_r+0x1e>
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	b103      	cbz	r3, 8001f66 <_read_r+0x1e>
 8001f64:	6023      	str	r3, [r4, #0]
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
 8001f68:	20003f1c 	.word	0x20003f1c

08001f6c <_write_r>:
 8001f6c:	b538      	push	{r3, r4, r5, lr}
 8001f6e:	4d07      	ldr	r5, [pc, #28]	@ (8001f8c <_write_r+0x20>)
 8001f70:	4604      	mov	r4, r0
 8001f72:	4608      	mov	r0, r1
 8001f74:	4611      	mov	r1, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	602a      	str	r2, [r5, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f7fe fa73 	bl	8000466 <_write>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	d102      	bne.n	8001f8a <_write_r+0x1e>
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	b103      	cbz	r3, 8001f8a <_write_r+0x1e>
 8001f88:	6023      	str	r3, [r4, #0]
 8001f8a:	bd38      	pop	{r3, r4, r5, pc}
 8001f8c:	20003f1c 	.word	0x20003f1c

08001f90 <__errno>:
 8001f90:	4b01      	ldr	r3, [pc, #4]	@ (8001f98 <__errno+0x8>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000018 	.word	0x20000018

08001f9c <__libc_init_array>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8001fd4 <__libc_init_array+0x38>)
 8001fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8001fd8 <__libc_init_array+0x3c>)
 8001fa2:	1b64      	subs	r4, r4, r5
 8001fa4:	10a4      	asrs	r4, r4, #2
 8001fa6:	2600      	movs	r6, #0
 8001fa8:	42a6      	cmp	r6, r4
 8001faa:	d109      	bne.n	8001fc0 <__libc_init_array+0x24>
 8001fac:	4d0b      	ldr	r5, [pc, #44]	@ (8001fdc <__libc_init_array+0x40>)
 8001fae:	4c0c      	ldr	r4, [pc, #48]	@ (8001fe0 <__libc_init_array+0x44>)
 8001fb0:	f000 fa54 	bl	800245c <_init>
 8001fb4:	1b64      	subs	r4, r4, r5
 8001fb6:	10a4      	asrs	r4, r4, #2
 8001fb8:	2600      	movs	r6, #0
 8001fba:	42a6      	cmp	r6, r4
 8001fbc:	d105      	bne.n	8001fca <__libc_init_array+0x2e>
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
 8001fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc4:	4798      	blx	r3
 8001fc6:	3601      	adds	r6, #1
 8001fc8:	e7ee      	b.n	8001fa8 <__libc_init_array+0xc>
 8001fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fce:	4798      	blx	r3
 8001fd0:	3601      	adds	r6, #1
 8001fd2:	e7f2      	b.n	8001fba <__libc_init_array+0x1e>
 8001fd4:	080025d0 	.word	0x080025d0
 8001fd8:	080025d0 	.word	0x080025d0
 8001fdc:	080025d0 	.word	0x080025d0
 8001fe0:	080025d4 	.word	0x080025d4

08001fe4 <__retarget_lock_init_recursive>:
 8001fe4:	4770      	bx	lr

08001fe6 <__retarget_lock_acquire_recursive>:
 8001fe6:	4770      	bx	lr

08001fe8 <__retarget_lock_release_recursive>:
 8001fe8:	4770      	bx	lr
	...

08001fec <_free_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	4605      	mov	r5, r0
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	d041      	beq.n	8002078 <_free_r+0x8c>
 8001ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ff8:	1f0c      	subs	r4, r1, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bfb8      	it	lt
 8001ffe:	18e4      	addlt	r4, r4, r3
 8002000:	f000 f8e0 	bl	80021c4 <__malloc_lock>
 8002004:	4a1d      	ldr	r2, [pc, #116]	@ (800207c <_free_r+0x90>)
 8002006:	6813      	ldr	r3, [r2, #0]
 8002008:	b933      	cbnz	r3, 8002018 <_free_r+0x2c>
 800200a:	6063      	str	r3, [r4, #4]
 800200c:	6014      	str	r4, [r2, #0]
 800200e:	4628      	mov	r0, r5
 8002010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002014:	f000 b8dc 	b.w	80021d0 <__malloc_unlock>
 8002018:	42a3      	cmp	r3, r4
 800201a:	d908      	bls.n	800202e <_free_r+0x42>
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	1821      	adds	r1, r4, r0
 8002020:	428b      	cmp	r3, r1
 8002022:	bf01      	itttt	eq
 8002024:	6819      	ldreq	r1, [r3, #0]
 8002026:	685b      	ldreq	r3, [r3, #4]
 8002028:	1809      	addeq	r1, r1, r0
 800202a:	6021      	streq	r1, [r4, #0]
 800202c:	e7ed      	b.n	800200a <_free_r+0x1e>
 800202e:	461a      	mov	r2, r3
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	b10b      	cbz	r3, 8002038 <_free_r+0x4c>
 8002034:	42a3      	cmp	r3, r4
 8002036:	d9fa      	bls.n	800202e <_free_r+0x42>
 8002038:	6811      	ldr	r1, [r2, #0]
 800203a:	1850      	adds	r0, r2, r1
 800203c:	42a0      	cmp	r0, r4
 800203e:	d10b      	bne.n	8002058 <_free_r+0x6c>
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	4401      	add	r1, r0
 8002044:	1850      	adds	r0, r2, r1
 8002046:	4283      	cmp	r3, r0
 8002048:	6011      	str	r1, [r2, #0]
 800204a:	d1e0      	bne.n	800200e <_free_r+0x22>
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	6053      	str	r3, [r2, #4]
 8002052:	4408      	add	r0, r1
 8002054:	6010      	str	r0, [r2, #0]
 8002056:	e7da      	b.n	800200e <_free_r+0x22>
 8002058:	d902      	bls.n	8002060 <_free_r+0x74>
 800205a:	230c      	movs	r3, #12
 800205c:	602b      	str	r3, [r5, #0]
 800205e:	e7d6      	b.n	800200e <_free_r+0x22>
 8002060:	6820      	ldr	r0, [r4, #0]
 8002062:	1821      	adds	r1, r4, r0
 8002064:	428b      	cmp	r3, r1
 8002066:	bf04      	itt	eq
 8002068:	6819      	ldreq	r1, [r3, #0]
 800206a:	685b      	ldreq	r3, [r3, #4]
 800206c:	6063      	str	r3, [r4, #4]
 800206e:	bf04      	itt	eq
 8002070:	1809      	addeq	r1, r1, r0
 8002072:	6021      	streq	r1, [r4, #0]
 8002074:	6054      	str	r4, [r2, #4]
 8002076:	e7ca      	b.n	800200e <_free_r+0x22>
 8002078:	bd38      	pop	{r3, r4, r5, pc}
 800207a:	bf00      	nop
 800207c:	20003f28 	.word	0x20003f28

08002080 <sbrk_aligned>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	4e0f      	ldr	r6, [pc, #60]	@ (80020c0 <sbrk_aligned+0x40>)
 8002084:	460c      	mov	r4, r1
 8002086:	6831      	ldr	r1, [r6, #0]
 8002088:	4605      	mov	r5, r0
 800208a:	b911      	cbnz	r1, 8002092 <sbrk_aligned+0x12>
 800208c:	f000 f9d6 	bl	800243c <_sbrk_r>
 8002090:	6030      	str	r0, [r6, #0]
 8002092:	4621      	mov	r1, r4
 8002094:	4628      	mov	r0, r5
 8002096:	f000 f9d1 	bl	800243c <_sbrk_r>
 800209a:	1c43      	adds	r3, r0, #1
 800209c:	d103      	bne.n	80020a6 <sbrk_aligned+0x26>
 800209e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80020a2:	4620      	mov	r0, r4
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	1cc4      	adds	r4, r0, #3
 80020a8:	f024 0403 	bic.w	r4, r4, #3
 80020ac:	42a0      	cmp	r0, r4
 80020ae:	d0f8      	beq.n	80020a2 <sbrk_aligned+0x22>
 80020b0:	1a21      	subs	r1, r4, r0
 80020b2:	4628      	mov	r0, r5
 80020b4:	f000 f9c2 	bl	800243c <_sbrk_r>
 80020b8:	3001      	adds	r0, #1
 80020ba:	d1f2      	bne.n	80020a2 <sbrk_aligned+0x22>
 80020bc:	e7ef      	b.n	800209e <sbrk_aligned+0x1e>
 80020be:	bf00      	nop
 80020c0:	20003f24 	.word	0x20003f24

080020c4 <_malloc_r>:
 80020c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020c8:	1ccd      	adds	r5, r1, #3
 80020ca:	f025 0503 	bic.w	r5, r5, #3
 80020ce:	3508      	adds	r5, #8
 80020d0:	2d0c      	cmp	r5, #12
 80020d2:	bf38      	it	cc
 80020d4:	250c      	movcc	r5, #12
 80020d6:	2d00      	cmp	r5, #0
 80020d8:	4606      	mov	r6, r0
 80020da:	db01      	blt.n	80020e0 <_malloc_r+0x1c>
 80020dc:	42a9      	cmp	r1, r5
 80020de:	d904      	bls.n	80020ea <_malloc_r+0x26>
 80020e0:	230c      	movs	r3, #12
 80020e2:	6033      	str	r3, [r6, #0]
 80020e4:	2000      	movs	r0, #0
 80020e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80021c0 <_malloc_r+0xfc>
 80020ee:	f000 f869 	bl	80021c4 <__malloc_lock>
 80020f2:	f8d8 3000 	ldr.w	r3, [r8]
 80020f6:	461c      	mov	r4, r3
 80020f8:	bb44      	cbnz	r4, 800214c <_malloc_r+0x88>
 80020fa:	4629      	mov	r1, r5
 80020fc:	4630      	mov	r0, r6
 80020fe:	f7ff ffbf 	bl	8002080 <sbrk_aligned>
 8002102:	1c43      	adds	r3, r0, #1
 8002104:	4604      	mov	r4, r0
 8002106:	d158      	bne.n	80021ba <_malloc_r+0xf6>
 8002108:	f8d8 4000 	ldr.w	r4, [r8]
 800210c:	4627      	mov	r7, r4
 800210e:	2f00      	cmp	r7, #0
 8002110:	d143      	bne.n	800219a <_malloc_r+0xd6>
 8002112:	2c00      	cmp	r4, #0
 8002114:	d04b      	beq.n	80021ae <_malloc_r+0xea>
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	4639      	mov	r1, r7
 800211a:	4630      	mov	r0, r6
 800211c:	eb04 0903 	add.w	r9, r4, r3
 8002120:	f000 f98c 	bl	800243c <_sbrk_r>
 8002124:	4581      	cmp	r9, r0
 8002126:	d142      	bne.n	80021ae <_malloc_r+0xea>
 8002128:	6821      	ldr	r1, [r4, #0]
 800212a:	1a6d      	subs	r5, r5, r1
 800212c:	4629      	mov	r1, r5
 800212e:	4630      	mov	r0, r6
 8002130:	f7ff ffa6 	bl	8002080 <sbrk_aligned>
 8002134:	3001      	adds	r0, #1
 8002136:	d03a      	beq.n	80021ae <_malloc_r+0xea>
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	442b      	add	r3, r5
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	f8d8 3000 	ldr.w	r3, [r8]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	bb62      	cbnz	r2, 80021a0 <_malloc_r+0xdc>
 8002146:	f8c8 7000 	str.w	r7, [r8]
 800214a:	e00f      	b.n	800216c <_malloc_r+0xa8>
 800214c:	6822      	ldr	r2, [r4, #0]
 800214e:	1b52      	subs	r2, r2, r5
 8002150:	d420      	bmi.n	8002194 <_malloc_r+0xd0>
 8002152:	2a0b      	cmp	r2, #11
 8002154:	d917      	bls.n	8002186 <_malloc_r+0xc2>
 8002156:	1961      	adds	r1, r4, r5
 8002158:	42a3      	cmp	r3, r4
 800215a:	6025      	str	r5, [r4, #0]
 800215c:	bf18      	it	ne
 800215e:	6059      	strne	r1, [r3, #4]
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	bf08      	it	eq
 8002164:	f8c8 1000 	streq.w	r1, [r8]
 8002168:	5162      	str	r2, [r4, r5]
 800216a:	604b      	str	r3, [r1, #4]
 800216c:	4630      	mov	r0, r6
 800216e:	f000 f82f 	bl	80021d0 <__malloc_unlock>
 8002172:	f104 000b 	add.w	r0, r4, #11
 8002176:	1d23      	adds	r3, r4, #4
 8002178:	f020 0007 	bic.w	r0, r0, #7
 800217c:	1ac2      	subs	r2, r0, r3
 800217e:	bf1c      	itt	ne
 8002180:	1a1b      	subne	r3, r3, r0
 8002182:	50a3      	strne	r3, [r4, r2]
 8002184:	e7af      	b.n	80020e6 <_malloc_r+0x22>
 8002186:	6862      	ldr	r2, [r4, #4]
 8002188:	42a3      	cmp	r3, r4
 800218a:	bf0c      	ite	eq
 800218c:	f8c8 2000 	streq.w	r2, [r8]
 8002190:	605a      	strne	r2, [r3, #4]
 8002192:	e7eb      	b.n	800216c <_malloc_r+0xa8>
 8002194:	4623      	mov	r3, r4
 8002196:	6864      	ldr	r4, [r4, #4]
 8002198:	e7ae      	b.n	80020f8 <_malloc_r+0x34>
 800219a:	463c      	mov	r4, r7
 800219c:	687f      	ldr	r7, [r7, #4]
 800219e:	e7b6      	b.n	800210e <_malloc_r+0x4a>
 80021a0:	461a      	mov	r2, r3
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	d1fb      	bne.n	80021a0 <_malloc_r+0xdc>
 80021a8:	2300      	movs	r3, #0
 80021aa:	6053      	str	r3, [r2, #4]
 80021ac:	e7de      	b.n	800216c <_malloc_r+0xa8>
 80021ae:	230c      	movs	r3, #12
 80021b0:	6033      	str	r3, [r6, #0]
 80021b2:	4630      	mov	r0, r6
 80021b4:	f000 f80c 	bl	80021d0 <__malloc_unlock>
 80021b8:	e794      	b.n	80020e4 <_malloc_r+0x20>
 80021ba:	6005      	str	r5, [r0, #0]
 80021bc:	e7d6      	b.n	800216c <_malloc_r+0xa8>
 80021be:	bf00      	nop
 80021c0:	20003f28 	.word	0x20003f28

080021c4 <__malloc_lock>:
 80021c4:	4801      	ldr	r0, [pc, #4]	@ (80021cc <__malloc_lock+0x8>)
 80021c6:	f7ff bf0e 	b.w	8001fe6 <__retarget_lock_acquire_recursive>
 80021ca:	bf00      	nop
 80021cc:	20003f20 	.word	0x20003f20

080021d0 <__malloc_unlock>:
 80021d0:	4801      	ldr	r0, [pc, #4]	@ (80021d8 <__malloc_unlock+0x8>)
 80021d2:	f7ff bf09 	b.w	8001fe8 <__retarget_lock_release_recursive>
 80021d6:	bf00      	nop
 80021d8:	20003f20 	.word	0x20003f20

080021dc <__sflush_r>:
 80021dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80021e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e4:	0716      	lsls	r6, r2, #28
 80021e6:	4605      	mov	r5, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	d454      	bmi.n	8002296 <__sflush_r+0xba>
 80021ec:	684b      	ldr	r3, [r1, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	dc02      	bgt.n	80021f8 <__sflush_r+0x1c>
 80021f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	dd48      	ble.n	800228a <__sflush_r+0xae>
 80021f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021fa:	2e00      	cmp	r6, #0
 80021fc:	d045      	beq.n	800228a <__sflush_r+0xae>
 80021fe:	2300      	movs	r3, #0
 8002200:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002204:	682f      	ldr	r7, [r5, #0]
 8002206:	6a21      	ldr	r1, [r4, #32]
 8002208:	602b      	str	r3, [r5, #0]
 800220a:	d030      	beq.n	800226e <__sflush_r+0x92>
 800220c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800220e:	89a3      	ldrh	r3, [r4, #12]
 8002210:	0759      	lsls	r1, r3, #29
 8002212:	d505      	bpl.n	8002220 <__sflush_r+0x44>
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	1ad2      	subs	r2, r2, r3
 8002218:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800221a:	b10b      	cbz	r3, 8002220 <__sflush_r+0x44>
 800221c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800221e:	1ad2      	subs	r2, r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002224:	6a21      	ldr	r1, [r4, #32]
 8002226:	4628      	mov	r0, r5
 8002228:	47b0      	blx	r6
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	89a3      	ldrh	r3, [r4, #12]
 800222e:	d106      	bne.n	800223e <__sflush_r+0x62>
 8002230:	6829      	ldr	r1, [r5, #0]
 8002232:	291d      	cmp	r1, #29
 8002234:	d82b      	bhi.n	800228e <__sflush_r+0xb2>
 8002236:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <__sflush_r+0x104>)
 8002238:	410a      	asrs	r2, r1
 800223a:	07d6      	lsls	r6, r2, #31
 800223c:	d427      	bmi.n	800228e <__sflush_r+0xb2>
 800223e:	2200      	movs	r2, #0
 8002240:	6062      	str	r2, [r4, #4]
 8002242:	04d9      	lsls	r1, r3, #19
 8002244:	6922      	ldr	r2, [r4, #16]
 8002246:	6022      	str	r2, [r4, #0]
 8002248:	d504      	bpl.n	8002254 <__sflush_r+0x78>
 800224a:	1c42      	adds	r2, r0, #1
 800224c:	d101      	bne.n	8002252 <__sflush_r+0x76>
 800224e:	682b      	ldr	r3, [r5, #0]
 8002250:	b903      	cbnz	r3, 8002254 <__sflush_r+0x78>
 8002252:	6560      	str	r0, [r4, #84]	@ 0x54
 8002254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002256:	602f      	str	r7, [r5, #0]
 8002258:	b1b9      	cbz	r1, 800228a <__sflush_r+0xae>
 800225a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800225e:	4299      	cmp	r1, r3
 8002260:	d002      	beq.n	8002268 <__sflush_r+0x8c>
 8002262:	4628      	mov	r0, r5
 8002264:	f7ff fec2 	bl	8001fec <_free_r>
 8002268:	2300      	movs	r3, #0
 800226a:	6363      	str	r3, [r4, #52]	@ 0x34
 800226c:	e00d      	b.n	800228a <__sflush_r+0xae>
 800226e:	2301      	movs	r3, #1
 8002270:	4628      	mov	r0, r5
 8002272:	47b0      	blx	r6
 8002274:	4602      	mov	r2, r0
 8002276:	1c50      	adds	r0, r2, #1
 8002278:	d1c9      	bne.n	800220e <__sflush_r+0x32>
 800227a:	682b      	ldr	r3, [r5, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0c6      	beq.n	800220e <__sflush_r+0x32>
 8002280:	2b1d      	cmp	r3, #29
 8002282:	d001      	beq.n	8002288 <__sflush_r+0xac>
 8002284:	2b16      	cmp	r3, #22
 8002286:	d11e      	bne.n	80022c6 <__sflush_r+0xea>
 8002288:	602f      	str	r7, [r5, #0]
 800228a:	2000      	movs	r0, #0
 800228c:	e022      	b.n	80022d4 <__sflush_r+0xf8>
 800228e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002292:	b21b      	sxth	r3, r3
 8002294:	e01b      	b.n	80022ce <__sflush_r+0xf2>
 8002296:	690f      	ldr	r7, [r1, #16]
 8002298:	2f00      	cmp	r7, #0
 800229a:	d0f6      	beq.n	800228a <__sflush_r+0xae>
 800229c:	0793      	lsls	r3, r2, #30
 800229e:	680e      	ldr	r6, [r1, #0]
 80022a0:	bf08      	it	eq
 80022a2:	694b      	ldreq	r3, [r1, #20]
 80022a4:	600f      	str	r7, [r1, #0]
 80022a6:	bf18      	it	ne
 80022a8:	2300      	movne	r3, #0
 80022aa:	eba6 0807 	sub.w	r8, r6, r7
 80022ae:	608b      	str	r3, [r1, #8]
 80022b0:	f1b8 0f00 	cmp.w	r8, #0
 80022b4:	dde9      	ble.n	800228a <__sflush_r+0xae>
 80022b6:	6a21      	ldr	r1, [r4, #32]
 80022b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80022ba:	4643      	mov	r3, r8
 80022bc:	463a      	mov	r2, r7
 80022be:	4628      	mov	r0, r5
 80022c0:	47b0      	blx	r6
 80022c2:	2800      	cmp	r0, #0
 80022c4:	dc08      	bgt.n	80022d8 <__sflush_r+0xfc>
 80022c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022ce:	81a3      	strh	r3, [r4, #12]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d8:	4407      	add	r7, r0
 80022da:	eba8 0800 	sub.w	r8, r8, r0
 80022de:	e7e7      	b.n	80022b0 <__sflush_r+0xd4>
 80022e0:	dfbffffe 	.word	0xdfbffffe

080022e4 <_fflush_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	690b      	ldr	r3, [r1, #16]
 80022e8:	4605      	mov	r5, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	b913      	cbnz	r3, 80022f4 <_fflush_r+0x10>
 80022ee:	2500      	movs	r5, #0
 80022f0:	4628      	mov	r0, r5
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	b118      	cbz	r0, 80022fe <_fflush_r+0x1a>
 80022f6:	6a03      	ldr	r3, [r0, #32]
 80022f8:	b90b      	cbnz	r3, 80022fe <_fflush_r+0x1a>
 80022fa:	f7ff fc39 	bl	8001b70 <__sinit>
 80022fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f3      	beq.n	80022ee <_fflush_r+0xa>
 8002306:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002308:	07d0      	lsls	r0, r2, #31
 800230a:	d404      	bmi.n	8002316 <_fflush_r+0x32>
 800230c:	0599      	lsls	r1, r3, #22
 800230e:	d402      	bmi.n	8002316 <_fflush_r+0x32>
 8002310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002312:	f7ff fe68 	bl	8001fe6 <__retarget_lock_acquire_recursive>
 8002316:	4628      	mov	r0, r5
 8002318:	4621      	mov	r1, r4
 800231a:	f7ff ff5f 	bl	80021dc <__sflush_r>
 800231e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002320:	07da      	lsls	r2, r3, #31
 8002322:	4605      	mov	r5, r0
 8002324:	d4e4      	bmi.n	80022f0 <_fflush_r+0xc>
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	059b      	lsls	r3, r3, #22
 800232a:	d4e1      	bmi.n	80022f0 <_fflush_r+0xc>
 800232c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800232e:	f7ff fe5b 	bl	8001fe8 <__retarget_lock_release_recursive>
 8002332:	e7dd      	b.n	80022f0 <_fflush_r+0xc>

08002334 <__swhatbuf_r>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	460c      	mov	r4, r1
 8002338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800233c:	2900      	cmp	r1, #0
 800233e:	b096      	sub	sp, #88	@ 0x58
 8002340:	4615      	mov	r5, r2
 8002342:	461e      	mov	r6, r3
 8002344:	da0d      	bge.n	8002362 <__swhatbuf_r+0x2e>
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800234c:	f04f 0100 	mov.w	r1, #0
 8002350:	bf14      	ite	ne
 8002352:	2340      	movne	r3, #64	@ 0x40
 8002354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002358:	2000      	movs	r0, #0
 800235a:	6031      	str	r1, [r6, #0]
 800235c:	602b      	str	r3, [r5, #0]
 800235e:	b016      	add	sp, #88	@ 0x58
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	466a      	mov	r2, sp
 8002364:	f000 f848 	bl	80023f8 <_fstat_r>
 8002368:	2800      	cmp	r0, #0
 800236a:	dbec      	blt.n	8002346 <__swhatbuf_r+0x12>
 800236c:	9901      	ldr	r1, [sp, #4]
 800236e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002376:	4259      	negs	r1, r3
 8002378:	4159      	adcs	r1, r3
 800237a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800237e:	e7eb      	b.n	8002358 <__swhatbuf_r+0x24>

08002380 <__smakebuf_r>:
 8002380:	898b      	ldrh	r3, [r1, #12]
 8002382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002384:	079d      	lsls	r5, r3, #30
 8002386:	4606      	mov	r6, r0
 8002388:	460c      	mov	r4, r1
 800238a:	d507      	bpl.n	800239c <__smakebuf_r+0x1c>
 800238c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	2301      	movs	r3, #1
 8002396:	6163      	str	r3, [r4, #20]
 8002398:	b003      	add	sp, #12
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239c:	ab01      	add	r3, sp, #4
 800239e:	466a      	mov	r2, sp
 80023a0:	f7ff ffc8 	bl	8002334 <__swhatbuf_r>
 80023a4:	9f00      	ldr	r7, [sp, #0]
 80023a6:	4605      	mov	r5, r0
 80023a8:	4639      	mov	r1, r7
 80023aa:	4630      	mov	r0, r6
 80023ac:	f7ff fe8a 	bl	80020c4 <_malloc_r>
 80023b0:	b948      	cbnz	r0, 80023c6 <__smakebuf_r+0x46>
 80023b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b6:	059a      	lsls	r2, r3, #22
 80023b8:	d4ee      	bmi.n	8002398 <__smakebuf_r+0x18>
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	81a3      	strh	r3, [r4, #12]
 80023c4:	e7e2      	b.n	800238c <__smakebuf_r+0xc>
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	6020      	str	r0, [r4, #0]
 80023ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ce:	81a3      	strh	r3, [r4, #12]
 80023d0:	9b01      	ldr	r3, [sp, #4]
 80023d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80023d6:	b15b      	cbz	r3, 80023f0 <__smakebuf_r+0x70>
 80023d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023dc:	4630      	mov	r0, r6
 80023de:	f000 f81d 	bl	800241c <_isatty_r>
 80023e2:	b128      	cbz	r0, 80023f0 <__smakebuf_r+0x70>
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	81a3      	strh	r3, [r4, #12]
 80023f0:	89a3      	ldrh	r3, [r4, #12]
 80023f2:	431d      	orrs	r5, r3
 80023f4:	81a5      	strh	r5, [r4, #12]
 80023f6:	e7cf      	b.n	8002398 <__smakebuf_r+0x18>

080023f8 <_fstat_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4d07      	ldr	r5, [pc, #28]	@ (8002418 <_fstat_r+0x20>)
 80023fc:	2300      	movs	r3, #0
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	602b      	str	r3, [r5, #0]
 8002406:	f7fe f856 	bl	80004b6 <_fstat>
 800240a:	1c43      	adds	r3, r0, #1
 800240c:	d102      	bne.n	8002414 <_fstat_r+0x1c>
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	b103      	cbz	r3, 8002414 <_fstat_r+0x1c>
 8002412:	6023      	str	r3, [r4, #0]
 8002414:	bd38      	pop	{r3, r4, r5, pc}
 8002416:	bf00      	nop
 8002418:	20003f1c 	.word	0x20003f1c

0800241c <_isatty_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4d06      	ldr	r5, [pc, #24]	@ (8002438 <_isatty_r+0x1c>)
 8002420:	2300      	movs	r3, #0
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	f7fe f855 	bl	80004d6 <_isatty>
 800242c:	1c43      	adds	r3, r0, #1
 800242e:	d102      	bne.n	8002436 <_isatty_r+0x1a>
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	b103      	cbz	r3, 8002436 <_isatty_r+0x1a>
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	bd38      	pop	{r3, r4, r5, pc}
 8002438:	20003f1c 	.word	0x20003f1c

0800243c <_sbrk_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4d06      	ldr	r5, [pc, #24]	@ (8002458 <_sbrk_r+0x1c>)
 8002440:	2300      	movs	r3, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	f7fe f85e 	bl	8000508 <_sbrk>
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d102      	bne.n	8002456 <_sbrk_r+0x1a>
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	b103      	cbz	r3, 8002456 <_sbrk_r+0x1a>
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	bd38      	pop	{r3, r4, r5, pc}
 8002458:	20003f1c 	.word	0x20003f1c

0800245c <_init>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr

08002468 <_fini>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	bf00      	nop
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr
